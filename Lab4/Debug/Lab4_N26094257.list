
Lab4_N26094257.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800499c  0800499c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049a4  080049a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080049ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000015e0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001658  20001658  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010787  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002463  00000000  00000000  0003082f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00032c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db0  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ca8  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111f0  00000000  00000000  00056588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e0a  00000000  00000000  00067778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139582  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a4  00000000  00000000  001395d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004820 	.word	0x08004820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004820 	.word	0x08004820

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <red_LED_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void red_LED_task(void *pvParameters)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <red_LED_task+0x1c>)
 8000592:	f000 fefe 	bl	8001392 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059a:	f002 fcf9 	bl	8002f90 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800059e:	e7f5      	b.n	800058c <red_LED_task+0x8>
 80005a0:	40020c00 	.word	0x40020c00

080005a4 <green_LED_task>:
	}
}

void green_LED_task(void *pvParameters)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <green_LED_task+0x1c>)
 80005b2:	f000 feee 	bl	8001392 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f002 fce9 	bl	8002f90 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005be:	e7f5      	b.n	80005ac <green_LED_task+0x8>
 80005c0:	40020c00 	.word	0x40020c00

080005c4 <task1>:
	}
}

void task1(void *pvParameters)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f002 fc4f 	bl	8002e70 <vTaskDelete>
 80005d2:	e7fb      	b.n	80005cc <task1+0x8>

080005d4 <task2>:
    }
}

void task2(void *pvParameters)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 fc47 	bl	8002e70 <vTaskDelete>
 80005e2:	e7fb      	b.n	80005dc <task2+0x8>

080005e4 <task3>:
    }
}

void task3(void *pvParameters)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f002 fc3f 	bl	8002e70 <vTaskDelete>
 80005f2:	e7fb      	b.n	80005ec <task3+0x8>

080005f4 <print_task>:
    }
}

void print_task(void *pvParameters)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    while (1) {
		vPrintFreeList();
 80005fc:	f003 fc00 	bl	8003e00 <vPrintFreeList>
		vTaskDelay(3000);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f002 fcc4 	bl	8002f90 <vTaskDelay>
		vPrintFreeList();
 8000608:	e7f8      	b.n	80005fc <print_task+0x8>
	...

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fbe5 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f85b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8ed 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061e:	f000 f8c1 	bl	80007a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(red_LED_task, "RED_LED", 100, NULL, 0, NULL);
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2300      	movs	r3, #0
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2264      	movs	r2, #100	; 0x64
 800062e:	491c      	ldr	r1, [pc, #112]	; (80006a0 <main+0x94>)
 8000630:	481c      	ldr	r0, [pc, #112]	; (80006a4 <main+0x98>)
 8000632:	f002 fab7 	bl	8002ba4 <xTaskCreate>
  xTaskCreate(task1, "TASK1", 50, NULL, 0, NULL);
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	4919      	ldr	r1, [pc, #100]	; (80006a8 <main+0x9c>)
 8000644:	4819      	ldr	r0, [pc, #100]	; (80006ac <main+0xa0>)
 8000646:	f002 faad 	bl	8002ba4 <xTaskCreate>
  xTaskCreate(task2, "TASK2", 30, NULL, 0, NULL);
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2300      	movs	r3, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	221e      	movs	r2, #30
 8000656:	4916      	ldr	r1, [pc, #88]	; (80006b0 <main+0xa4>)
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <main+0xa8>)
 800065a:	f002 faa3 	bl	8002ba4 <xTaskCreate>
  xTaskCreate(green_LED_task, "GREEN_LED", 130, NULL, 0, NULL);
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2300      	movs	r3, #0
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2282      	movs	r2, #130	; 0x82
 800066a:	4913      	ldr	r1, [pc, #76]	; (80006b8 <main+0xac>)
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0xb0>)
 800066e:	f002 fa99 	bl	8002ba4 <xTaskCreate>
  xTaskCreate(task3, "TASK3", 40, NULL, 0, NULL);
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2300      	movs	r3, #0
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2228      	movs	r2, #40	; 0x28
 800067e:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xb4>)
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <main+0xb8>)
 8000682:	f002 fa8f 	bl	8002ba4 <xTaskCreate>
  xTaskCreate(print_task, "PRINT", 130, NULL, 0, NULL);
 8000686:	2300      	movs	r3, #0
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2300      	movs	r3, #0
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2282      	movs	r2, #130	; 0x82
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <main+0xbc>)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <main+0xc0>)
 8000696:	f002 fa85 	bl	8002ba4 <xTaskCreate>
  vTaskStartScheduler();
 800069a:	f002 fcad 	bl	8002ff8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0x92>
 80006a0:	08004838 	.word	0x08004838
 80006a4:	08000585 	.word	0x08000585
 80006a8:	08004840 	.word	0x08004840
 80006ac:	080005c5 	.word	0x080005c5
 80006b0:	08004848 	.word	0x08004848
 80006b4:	080005d5 	.word	0x080005d5
 80006b8:	08004850 	.word	0x08004850
 80006bc:	080005a5 	.word	0x080005a5
 80006c0:	0800485c 	.word	0x0800485c
 80006c4:	080005e5 	.word	0x080005e5
 80006c8:	08004864 	.word	0x08004864
 80006cc:	080005f5 	.word	0x080005f5

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fc2e 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <SystemClock_Config+0xcc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemClock_Config+0xd0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000744:	2332      	movs	r3, #50	; 0x32
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000748:	2304      	movs	r3, #4
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074c:	2307      	movs	r3, #7
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fe37 	bl	80013c8 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 f9ba 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f898 	bl	80018b8 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800078e:	f000 f9a3 	bl	8000ad8 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f001 fd6c 	bl	80022b8 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f977 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000094 	.word	0x20000094
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4ba2      	ldr	r3, [pc, #648]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4aa1      	ldr	r2, [pc, #644]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b9f      	ldr	r3, [pc, #636]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b9b      	ldr	r3, [pc, #620]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a9a      	ldr	r2, [pc, #616]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b98      	ldr	r3, [pc, #608]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b94      	ldr	r3, [pc, #592]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a93      	ldr	r2, [pc, #588]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b91      	ldr	r3, [pc, #580]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b8d      	ldr	r3, [pc, #564]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a8c      	ldr	r2, [pc, #560]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b8a      	ldr	r3, [pc, #552]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b86      	ldr	r3, [pc, #536]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a85      	ldr	r2, [pc, #532]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b83      	ldr	r3, [pc, #524]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b7f      	ldr	r3, [pc, #508]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a7e      	ldr	r2, [pc, #504]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <MX_GPIO_Init+0x2a4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4879      	ldr	r0, [pc, #484]	; (8000aa0 <MX_GPIO_Init+0x2a8>)
 80008bc:	f000 fd50 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	4877      	ldr	r0, [pc, #476]	; (8000aa4 <MX_GPIO_Init+0x2ac>)
 80008c6:	f000 fd4b 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ca:	2200      	movs	r2, #0
 80008cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008d0:	4875      	ldr	r0, [pc, #468]	; (8000aa8 <MX_GPIO_Init+0x2b0>)
 80008d2:	f000 fd45 	bl	8001360 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	486c      	ldr	r0, [pc, #432]	; (8000aa0 <MX_GPIO_Init+0x2a8>)
 80008ee:	f000 fb9b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <MX_GPIO_Init+0x2ac>)
 800090a:	f000 fb8d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091e:	2305      	movs	r3, #5
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fb7d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000932:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	485a      	ldr	r0, [pc, #360]	; (8000aac <MX_GPIO_Init+0x2b4>)
 8000944:	f000 fb70 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000948:	2310      	movs	r3, #16
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000958:	2306      	movs	r3, #6
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4852      	ldr	r0, [pc, #328]	; (8000aac <MX_GPIO_Init+0x2b4>)
 8000964:	f000 fb60 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000968:	23e0      	movs	r3, #224	; 0xe0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000978:	2305      	movs	r3, #5
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	484a      	ldr	r0, [pc, #296]	; (8000aac <MX_GPIO_Init+0x2b4>)
 8000984:	f000 fb50 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000988:	2304      	movs	r3, #4
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4845      	ldr	r0, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x2b8>)
 800099c:	f000 fb44 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b2:	2305      	movs	r3, #5
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	483c      	ldr	r0, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x2b8>)
 80009be:	f000 fb33 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4833      	ldr	r0, [pc, #204]	; (8000aa8 <MX_GPIO_Init+0x2b0>)
 80009dc:	f000 fb24 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f2:	2306      	movs	r3, #6
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0x2ac>)
 80009fe:	f000 fb13 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4825      	ldr	r0, [pc, #148]	; (8000aac <MX_GPIO_Init+0x2b4>)
 8000a18:	f000 fb06 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481c      	ldr	r0, [pc, #112]	; (8000aac <MX_GPIO_Init+0x2b4>)
 8000a3a:	f000 faf5 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x2b0>)
 8000a52:	f000 fae9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <MX_GPIO_Init+0x2b8>)
 8000a74:	f000 fad8 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0x2a8>)
 8000a8e:	f000 facb 	bl	8001028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f9ad 	bl	8000e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40001400 	.word	0x40001400

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12b      	bne.n	8000bae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x8c>)
 8000baa:	f000 fa3d 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf0:	f107 0210 	add.w	r2, r7, #16
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f87c 	bl	8001cf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c0a:	f001 f84d 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8000c0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c10:	e004      	b.n	8000c1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 f849 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8000c16:	4603      	mov	r3, r0
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <HAL_InitTick+0xe8>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	0c9b      	lsrs	r3, r3, #18
 8000c26:	3b01      	subs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <HAL_InitTick+0xf0>)
 8000c2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c36:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c52:	f001 f883 	bl	8001d5c <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11b      	bne.n	8000c9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c66:	f001 f8d3 	bl	8001e10 <HAL_TIM_Base_Start_IT>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d111      	bne.n	8000c9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c78:	2037      	movs	r0, #55	; 0x37
 8000c7a:	f000 f9c7 	bl	800100c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d808      	bhi.n	8000c96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	2037      	movs	r0, #55	; 0x37
 8000c8a:	f000 f9a3 	bl	8000fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0xf4>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e002      	b.n	8000c9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3738      	adds	r7, #56	; 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	200000d8 	.word	0x200000d8
 8000cb4:	40001400 	.word	0x40001400
 8000cb8:	20000004 	.word	0x20000004

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TIM7_IRQHandler+0x10>)
 8000cee:	f001 f8ff 	bl	8001ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000d8 	.word	0x200000d8

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f003 f8d0 	bl	8003ed0 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20020000 	.word	0x20020000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	20000120 	.word	0x20000120
 8000d64:	20001658 	.word	0x20001658

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 f88f 	bl	8003edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc25 	bl	800060c <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dd0:	080049ac 	.word	0x080049ac
  ldr r2, =_sbss
 8000dd4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dd8:	20001658 	.word	0x20001658

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f8d8 	bl	8000fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fed8 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fe66 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000124 	.word	0x20000124

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000124 	.word	0x20000124

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff4c 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe6:	f7ff ff61 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff ffb1 	bl	8000f58 <NVIC_EncodePriority>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff80 	bl	8000f04 <__NVIC_SetPriority>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff54 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e16b      	b.n	800131c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 815a 	bne.w	8001316 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	2b02      	cmp	r3, #2
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80b4 	beq.w	8001316 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a5f      	ldr	r2, [pc, #380]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a5b      	ldr	r2, [pc, #364]	; (8001338 <HAL_GPIO_Init+0x310>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_GPIO_Init+0x314>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a51      	ldr	r2, [pc, #324]	; (8001340 <HAL_GPIO_Init+0x318>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a50      	ldr	r2, [pc, #320]	; (8001344 <HAL_GPIO_Init+0x31c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	; (8001348 <HAL_GPIO_Init+0x320>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_Init+0x324>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x328>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x32c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x20e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x330>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x20a>
 800122e:	2307      	movs	r3, #7
 8001230:	e00e      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001232:	2308      	movs	r3, #8
 8001234:	e00c      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001236:	2306      	movs	r3, #6
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123a:	2305      	movs	r3, #5
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124e:	2300      	movs	r3, #0
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4935      	ldr	r1, [pc, #212]	; (8001338 <HAL_GPIO_Init+0x310>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_GPIO_Init+0x334>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_GPIO_Init+0x334>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_GPIO_Init+0x334>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012bc:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_GPIO_Init+0x334>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_GPIO_Init+0x334>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e6:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_GPIO_Init+0x334>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_GPIO_Init+0x334>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_GPIO_Init+0x334>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	f67f ae90 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40021c00 	.word	0x40021c00
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	041a      	lsls	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	619a      	str	r2, [r3, #24]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a4:	887a      	ldrh	r2, [r7, #2]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4013      	ands	r3, r2
 80013aa:	041a      	lsls	r2, r3, #16
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	400b      	ands	r3, r1
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e267      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d075      	beq.n	80014d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d112      	bne.n	8001424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140a:	d10b      	bne.n	8001424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d05b      	beq.n	80014d0 <HAL_RCC_OscConfig+0x108>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d157      	bne.n	80014d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e242      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x74>
 800142e:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a75      	ldr	r2, [pc, #468]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e01d      	b.n	8001478 <HAL_RCC_OscConfig+0xb0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x98>
 8001446:	4b70      	ldr	r3, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6f      	ldr	r2, [pc, #444]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6c      	ldr	r2, [pc, #432]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0xb0>
 8001460:	4b69      	ldr	r3, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a68      	ldr	r2, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a65      	ldr	r2, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fce4 	bl	8000e4c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fce0 	bl	8000e4c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e207      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b5b      	ldr	r3, [pc, #364]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0xc0>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcd0 	bl	8000e4c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fccc 	bl	8000e4c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1f3      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0xe8>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d063      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d11c      	bne.n	8001530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d116      	bne.n	8001530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_RCC_OscConfig+0x152>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e1c7      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	e03a      	b.n	80015a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_RCC_OscConfig+0x244>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff fc85 	bl	8000e4c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fc81 	bl	8000e4c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e1a8      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4925      	ldr	r1, [pc, #148]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
 8001578:	e015      	b.n	80015a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_RCC_OscConfig+0x244>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fc64 	bl	8000e4c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fc60 	bl	8000e4c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e187      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d036      	beq.n	8001620 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d016      	beq.n	80015e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_RCC_OscConfig+0x248>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff fc44 	bl	8000e4c <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc40 	bl	8000e4c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e167      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80015dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x200>
 80015e6:	e01b      	b.n	8001620 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x248>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fc2d 	bl	8000e4c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	e00e      	b.n	8001614 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc29 	bl	8000e4c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d907      	bls.n	8001614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e150      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
 8001608:	40023800 	.word	0x40023800
 800160c:	42470000 	.word	0x42470000
 8001610:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ea      	bne.n	80015f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8097 	beq.w	800175c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a7c      	ldr	r2, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x474>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166a:	4b74      	ldr	r3, [pc, #464]	; (800183c <HAL_RCC_OscConfig+0x474>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a73      	ldr	r2, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x474>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fbe9 	bl	8000e4c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fbe5 	bl	8000e4c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e10c      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	4b6a      	ldr	r3, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x474>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2ea>
 80016a4:	4b64      	ldr	r3, [pc, #400]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a63      	ldr	r2, [pc, #396]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x324>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x30c>
 80016ba:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a5e      	ldr	r2, [pc, #376]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
 80016c6:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	4a5b      	ldr	r2, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6713      	str	r3, [r2, #112]	; 0x70
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0x324>
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a54      	ldr	r2, [pc, #336]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 0304 	bic.w	r3, r3, #4
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d015      	beq.n	8001720 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fbaa 	bl	8000e4c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fba6 	bl	8000e4c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0cb      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0ee      	beq.n	80016fc <HAL_RCC_OscConfig+0x334>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fb94 	bl	8000e4c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fb90 	bl	8000e4c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0b5      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ee      	bne.n	8001728 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001750:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a38      	ldr	r2, [pc, #224]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a1 	beq.w	80018a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d05c      	beq.n	800182c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d141      	bne.n	80017fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_OscConfig+0x478>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb64 	bl	8000e4c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fb60 	bl	8000e4c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e087      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	3b01      	subs	r3, #1
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	491b      	ldr	r1, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x478>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fb39 	bl	8000e4c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fb35 	bl	8000e4c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e05c      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x416>
 80017fc:	e054      	b.n	80018a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_OscConfig+0x478>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb22 	bl	8000e4c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fb1e 	bl	8000e4c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e045      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x444>
 800182a:	e03d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e038      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000
 8001840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x4ec>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d028      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d121      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800187a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800187c:	4293      	cmp	r3, r2
 800187e:	d111      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0cc      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d90c      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800190c:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800192e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	494d      	ldr	r1, [pc, #308]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d044      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d119      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d003      	beq.n	8001976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001972:	2b03      	cmp	r3, #3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e067      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4934      	ldr	r1, [pc, #208]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a8:	f7ff fa50 	bl	8000e4c <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7ff fa4c 	bl	8000e4c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e04f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1eb      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d20c      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e032      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4916      	ldr	r1, [pc, #88]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3e:	f000 f821 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	490a      	ldr	r1, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f8b0 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08004950 	.word	0x08004950
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a88:	b094      	sub	sp, #80	; 0x50
 8001a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a90:	2300      	movs	r3, #0
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a94:	2300      	movs	r3, #0
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9c:	4b79      	ldr	r3, [pc, #484]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	f200 80e1 	bhi.w	8001c70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ab6:	e0db      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001abc:	e0db      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac2:	e0d8      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ada:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
 8001af2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001af6:	4622      	mov	r2, r4
 8001af8:	462b      	mov	r3, r5
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0159      	lsls	r1, r3, #5
 8001b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b08:	0150      	lsls	r0, r2, #5
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4621      	mov	r1, r4
 8001b10:	1a51      	subs	r1, r2, r1
 8001b12:	6139      	str	r1, [r7, #16]
 8001b14:	4629      	mov	r1, r5
 8001b16:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b28:	4659      	mov	r1, fp
 8001b2a:	018b      	lsls	r3, r1, #6
 8001b2c:	4651      	mov	r1, sl
 8001b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b32:	4651      	mov	r1, sl
 8001b34:	018a      	lsls	r2, r1, #6
 8001b36:	4651      	mov	r1, sl
 8001b38:	ebb2 0801 	subs.w	r8, r2, r1
 8001b3c:	4659      	mov	r1, fp
 8001b3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b56:	4690      	mov	r8, r2
 8001b58:	4699      	mov	r9, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	eb18 0303 	adds.w	r3, r8, r3
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	462b      	mov	r3, r5
 8001b64:	eb49 0303 	adc.w	r3, r9, r3
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b76:	4629      	mov	r1, r5
 8001b78:	024b      	lsls	r3, r1, #9
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b80:	4621      	mov	r1, r4
 8001b82:	024a      	lsls	r2, r1, #9
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b94:	f7fe fb74 	bl	8000280 <__aeabi_uldivmod>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba0:	e058      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	4611      	mov	r1, r2
 8001bae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bce:	0150      	lsls	r0, r2, #5
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	61fa      	str	r2, [r7, #28]
 8001c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c48:	f7fe fb1a 	bl	8000280 <__aeabi_uldivmod>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4613      	mov	r3, r2
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3750      	adds	r7, #80	; 0x50
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	007a1200 	.word	0x007a1200

08001c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cac:	f7ff fff0 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0a9b      	lsrs	r3, r3, #10
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4903      	ldr	r1, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	08004960 	.word	0x08004960

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff ffdc 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0b5b      	lsrs	r3, r3, #13
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08004960 	.word	0x08004960

08001cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	220f      	movs	r2, #15
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetClockConfig+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0207 	and.w	r2, r3, #7
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e041      	b.n	8001df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f839 	bl	8001dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 f9d8 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d001      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04e      	b.n	8001ec6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d01d      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_TIM_Base_Start_IT+0xdc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d111      	bne.n	8001eb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d010      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	e007      	b.n	8001ec4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00
 8001ee4:	40010400 	.word	0x40010400
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40001800 	.word	0x40001800

08001ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0202 	mvn.w	r2, #2
 8001f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8ee 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8e0 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8f1 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c4 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8b6 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8c7 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89a 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f88c 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f89d 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f870 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f862 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f873 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0201 	mvn.w	r2, #1
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fd20 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f902 	bl	80022a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f838 	bl	800213c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0220 	mvn.w	r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8cc 	bl	8002290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <TIM_Base_SetConfig+0x114>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <TIM_Base_SetConfig+0x118>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <TIM_Base_SetConfig+0x11c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <TIM_Base_SetConfig+0x120>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <TIM_Base_SetConfig+0x124>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <TIM_Base_SetConfig+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d027      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <TIM_Base_SetConfig+0x118>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d023      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <TIM_Base_SetConfig+0x11c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <TIM_Base_SetConfig+0x120>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a29      	ldr	r2, [pc, #164]	; (8002274 <TIM_Base_SetConfig+0x124>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d017      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <TIM_Base_SetConfig+0x128>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <TIM_Base_SetConfig+0x12c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <TIM_Base_SetConfig+0x130>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0x134>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <TIM_Base_SetConfig+0x138>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <TIM_Base_SetConfig+0x13c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <TIM_Base_SetConfig+0x114>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0xf8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <TIM_Base_SetConfig+0x124>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800
 8002284:	40001800 	.word	0x40001800
 8002288:	40001c00 	.word	0x40001c00
 800228c:	40002000 	.word	0x40002000

08002290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e03f      	b.n	800234a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fc28 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f929 	bl	8002554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b08a      	sub	sp, #40	; 0x28
 8002356:	af02      	add	r7, sp, #8
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	d17c      	bne.n	800246c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_UART_Transmit+0x2c>
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e075      	b.n	800246e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_UART_Transmit+0x3e>
 800238c:	2302      	movs	r3, #2
 800238e:	e06e      	b.n	800246e <HAL_UART_Transmit+0x11c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fd51 	bl	8000e4c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Transmit+0x82>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023e4:	e02a      	b.n	800243c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f840 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e036      	b.n	800246e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002414:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3302      	adds	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e007      	b.n	800242e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3301      	adds	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1cf      	bne.n	80023e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f810 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e006      	b.n	800246e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b090      	sub	sp, #64	; 0x40
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002486:	e050      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d04c      	beq.n	800252a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002496:	f7fe fcd9 	bl	8000e4c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d241      	bcs.n	800252a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024c6:	637a      	str	r2, [r7, #52]	; 0x34
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e5      	bne.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3314      	adds	r3, #20
 80024f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024fa:	623a      	str	r2, [r7, #32]
 80024fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	69f9      	ldr	r1, [r7, #28]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	e841 2300 	strex	r3, r2, [r1]
 8002506:	61bb      	str	r3, [r7, #24]
   return(result);
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e5      	bne.n	80024da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e00f      	b.n	800254a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	429a      	cmp	r2, r3
 8002546:	d09f      	beq.n	8002488 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3740      	adds	r7, #64	; 0x40
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b0c0      	sub	sp, #256	; 0x100
 800255a:	af00      	add	r7, sp, #0
 800255c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	68d9      	ldr	r1, [r3, #12]
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	ea40 0301 	orr.w	r3, r0, r1
 800257c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	431a      	orrs	r2, r3
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025ac:	f021 010c 	bic.w	r1, r1, #12
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ba:	430b      	orrs	r3, r1
 80025bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ce:	6999      	ldr	r1, [r3, #24]
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	ea40 0301 	orr.w	r3, r0, r1
 80025da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b8f      	ldr	r3, [pc, #572]	; (8002820 <UART_SetConfig+0x2cc>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d005      	beq.n	80025f4 <UART_SetConfig+0xa0>
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b8d      	ldr	r3, [pc, #564]	; (8002824 <UART_SetConfig+0x2d0>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d104      	bne.n	80025fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025f4:	f7ff fb6c 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 80025f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025fc:	e003      	b.n	8002606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025fe:	f7ff fb53 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002602:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002610:	f040 810c 	bne.w	800282c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002618:	2200      	movs	r2, #0
 800261a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800261e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002626:	4622      	mov	r2, r4
 8002628:	462b      	mov	r3, r5
 800262a:	1891      	adds	r1, r2, r2
 800262c:	65b9      	str	r1, [r7, #88]	; 0x58
 800262e:	415b      	adcs	r3, r3
 8002630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002636:	4621      	mov	r1, r4
 8002638:	eb12 0801 	adds.w	r8, r2, r1
 800263c:	4629      	mov	r1, r5
 800263e:	eb43 0901 	adc.w	r9, r3, r1
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800264e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002656:	4690      	mov	r8, r2
 8002658:	4699      	mov	r9, r3
 800265a:	4623      	mov	r3, r4
 800265c:	eb18 0303 	adds.w	r3, r8, r3
 8002660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002664:	462b      	mov	r3, r5
 8002666:	eb49 0303 	adc.w	r3, r9, r3
 800266a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800267a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800267e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002682:	460b      	mov	r3, r1
 8002684:	18db      	adds	r3, r3, r3
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
 8002688:	4613      	mov	r3, r2
 800268a:	eb42 0303 	adc.w	r3, r2, r3
 800268e:	657b      	str	r3, [r7, #84]	; 0x54
 8002690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002698:	f7fd fdf2 	bl	8000280 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <UART_SetConfig+0x2d4>)
 80026a2:	fba3 2302 	umull	r2, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	011c      	lsls	r4, r3, #4
 80026aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026bc:	4642      	mov	r2, r8
 80026be:	464b      	mov	r3, r9
 80026c0:	1891      	adds	r1, r2, r2
 80026c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80026c4:	415b      	adcs	r3, r3
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026cc:	4641      	mov	r1, r8
 80026ce:	eb12 0a01 	adds.w	sl, r2, r1
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb43 0b01 	adc.w	fp, r3, r1
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ec:	4692      	mov	sl, r2
 80026ee:	469b      	mov	fp, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	eb1a 0303 	adds.w	r3, sl, r3
 80026f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026fa:	464b      	mov	r3, r9
 80026fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002710:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002718:	460b      	mov	r3, r1
 800271a:	18db      	adds	r3, r3, r3
 800271c:	643b      	str	r3, [r7, #64]	; 0x40
 800271e:	4613      	mov	r3, r2
 8002720:	eb42 0303 	adc.w	r3, r2, r3
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
 8002726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800272a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800272e:	f7fd fda7 	bl	8000280 <__aeabi_uldivmod>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4611      	mov	r1, r2
 8002738:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <UART_SetConfig+0x2d4>)
 800273a:	fba3 2301 	umull	r2, r3, r3, r1
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2264      	movs	r2, #100	; 0x64
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	1acb      	subs	r3, r1, r3
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <UART_SetConfig+0x2d4>)
 8002750:	fba3 2302 	umull	r2, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800275c:	441c      	add	r4, r3
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002768:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800276c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	1891      	adds	r1, r2, r2
 8002776:	63b9      	str	r1, [r7, #56]	; 0x38
 8002778:	415b      	adcs	r3, r3
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002780:	4641      	mov	r1, r8
 8002782:	1851      	adds	r1, r2, r1
 8002784:	6339      	str	r1, [r7, #48]	; 0x30
 8002786:	4649      	mov	r1, r9
 8002788:	414b      	adcs	r3, r1
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002798:	4659      	mov	r1, fp
 800279a:	00cb      	lsls	r3, r1, #3
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a2:	4651      	mov	r1, sl
 80027a4:	00ca      	lsls	r2, r1, #3
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	4642      	mov	r2, r8
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027b4:	464b      	mov	r3, r9
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027d4:	460b      	mov	r3, r1
 80027d6:	18db      	adds	r3, r3, r3
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027da:	4613      	mov	r3, r2
 80027dc:	eb42 0303 	adc.w	r3, r2, r3
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027ea:	f7fd fd49 	bl	8000280 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <UART_SetConfig+0x2d4>)
 80027f4:	fba3 1302 	umull	r1, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <UART_SetConfig+0x2d4>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	f003 0207 	and.w	r2, r3, #7
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4422      	add	r2, r4
 800281a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800281c:	e105      	b.n	8002a2a <UART_SetConfig+0x4d6>
 800281e:	bf00      	nop
 8002820:	40011000 	.word	0x40011000
 8002824:	40011400 	.word	0x40011400
 8002828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800282c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002830:	2200      	movs	r2, #0
 8002832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002836:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800283a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800283e:	4642      	mov	r2, r8
 8002840:	464b      	mov	r3, r9
 8002842:	1891      	adds	r1, r2, r2
 8002844:	6239      	str	r1, [r7, #32]
 8002846:	415b      	adcs	r3, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284e:	4641      	mov	r1, r8
 8002850:	1854      	adds	r4, r2, r1
 8002852:	4649      	mov	r1, r9
 8002854:	eb43 0501 	adc.w	r5, r3, r1
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	00eb      	lsls	r3, r5, #3
 8002862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	4614      	mov	r4, r2
 800286a:	461d      	mov	r5, r3
 800286c:	4643      	mov	r3, r8
 800286e:	18e3      	adds	r3, r4, r3
 8002870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002874:	464b      	mov	r3, r9
 8002876:	eb45 0303 	adc.w	r3, r5, r3
 800287a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800288a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800289a:	4629      	mov	r1, r5
 800289c:	008b      	lsls	r3, r1, #2
 800289e:	4621      	mov	r1, r4
 80028a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a4:	4621      	mov	r1, r4
 80028a6:	008a      	lsls	r2, r1, #2
 80028a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028ac:	f7fd fce8 	bl	8000280 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <UART_SetConfig+0x4e4>)
 80028b6:	fba3 2302 	umull	r2, r3, r3, r2
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	011c      	lsls	r4, r3, #4
 80028be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	1891      	adds	r1, r2, r2
 80028d6:	61b9      	str	r1, [r7, #24]
 80028d8:	415b      	adcs	r3, r3
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e0:	4641      	mov	r1, r8
 80028e2:	1851      	adds	r1, r2, r1
 80028e4:	6139      	str	r1, [r7, #16]
 80028e6:	4649      	mov	r1, r9
 80028e8:	414b      	adcs	r3, r1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f8:	4659      	mov	r1, fp
 80028fa:	00cb      	lsls	r3, r1, #3
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002902:	4651      	mov	r1, sl
 8002904:	00ca      	lsls	r2, r1, #3
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4603      	mov	r3, r0
 800290c:	4642      	mov	r2, r8
 800290e:	189b      	adds	r3, r3, r2
 8002910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002914:	464b      	mov	r3, r9
 8002916:	460a      	mov	r2, r1
 8002918:	eb42 0303 	adc.w	r3, r2, r3
 800291c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	67bb      	str	r3, [r7, #120]	; 0x78
 800292a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002938:	4649      	mov	r1, r9
 800293a:	008b      	lsls	r3, r1, #2
 800293c:	4641      	mov	r1, r8
 800293e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002942:	4641      	mov	r1, r8
 8002944:	008a      	lsls	r2, r1, #2
 8002946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800294a:	f7fd fc99 	bl	8000280 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <UART_SetConfig+0x4e4>)
 8002954:	fba3 1302 	umull	r1, r3, r3, r2
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	2164      	movs	r1, #100	; 0x64
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	3332      	adds	r3, #50	; 0x32
 8002966:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <UART_SetConfig+0x4e4>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002972:	441c      	add	r4, r3
 8002974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002978:	2200      	movs	r2, #0
 800297a:	673b      	str	r3, [r7, #112]	; 0x70
 800297c:	677a      	str	r2, [r7, #116]	; 0x74
 800297e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002982:	4642      	mov	r2, r8
 8002984:	464b      	mov	r3, r9
 8002986:	1891      	adds	r1, r2, r2
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	415b      	adcs	r3, r3
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002992:	4641      	mov	r1, r8
 8002994:	1851      	adds	r1, r2, r1
 8002996:	6039      	str	r1, [r7, #0]
 8002998:	4649      	mov	r1, r9
 800299a:	414b      	adcs	r3, r1
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029aa:	4659      	mov	r1, fp
 80029ac:	00cb      	lsls	r3, r1, #3
 80029ae:	4651      	mov	r1, sl
 80029b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b4:	4651      	mov	r1, sl
 80029b6:	00ca      	lsls	r2, r1, #3
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	4603      	mov	r3, r0
 80029be:	4642      	mov	r2, r8
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029c4:	464b      	mov	r3, r9
 80029c6:	460a      	mov	r2, r1
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	663b      	str	r3, [r7, #96]	; 0x60
 80029d8:	667a      	str	r2, [r7, #100]	; 0x64
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029e6:	4649      	mov	r1, r9
 80029e8:	008b      	lsls	r3, r1, #2
 80029ea:	4641      	mov	r1, r8
 80029ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029f0:	4641      	mov	r1, r8
 80029f2:	008a      	lsls	r2, r1, #2
 80029f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029f8:	f7fd fc42 	bl	8000280 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <UART_SetConfig+0x4e4>)
 8002a02:	fba3 1302 	umull	r1, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2164      	movs	r1, #100	; 0x64
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	3332      	adds	r3, #50	; 0x32
 8002a14:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <UART_SetConfig+0x4e4>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4422      	add	r2, r4
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a30:	46bd      	mov	sp, r7
 8002a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a36:	bf00      	nop
 8002a38:	51eb851f 	.word	0x51eb851f

08002a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 0208 	add.w	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0208 	add.w	r2, r3, #8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f103 0208 	add.w	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d103      	bne.n	8002afe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e00c      	b.n	8002b18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3308      	adds	r3, #8
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e002      	b.n	8002b0c <vListInsert+0x2e>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d2f6      	bcs.n	8002b06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6852      	ldr	r2, [r2, #4]
 8002b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b090      	sub	sp, #64	; 0x40
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
    char name[20];
    strcpy(name, pcName);
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f9e8 	bl	8003f90 <strcpy>
    strcat(name, "\n\r");
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fb03 	bl	80001d0 <strlen>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <xTaskCreate+0xc8>)
 8002bd6:	8811      	ldrh	r1, [r2, #0]
 8002bd8:	7892      	ldrb	r2, [r2, #2]
 8002bda:	8019      	strh	r1, [r3, #0]
 8002bdc:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)name, strlen(name), 0xffff);
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd faf4 	bl	80001d0 <strlen>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	f107 0110 	add.w	r1, r7, #16
 8002bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf4:	481e      	ldr	r0, [pc, #120]	; (8002c70 <xTaskCreate+0xcc>)
 8002bf6:	f7ff fbac 	bl	8002352 <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 ff3a 	bl	8003a78 <pvPortMalloc>
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c0c:	2058      	movs	r0, #88	; 0x58
 8002c0e:	f000 ff33 	bl	8003a78 <pvPortMalloc>
 8002c12:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c20:	e005      	b.n	8002c2e <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c24:	f001 f848 	bl	8003cb8 <vPortFree>
 8002c28:	e001      	b.n	8002c2e <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9303      	str	r3, [sp, #12]
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f812 	bl	8002c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c52:	f000 f89f 	bl	8002d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c56:	2301      	movs	r3, #1
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	e002      	b.n	8002c62 <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3730      	adds	r7, #48	; 0x30
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	0800486c 	.word	0x0800486c
 8002c70:	20000094 	.word	0x20000094

08002c74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	21a5      	movs	r1, #165	; 0xa5
 8002c8e:	f001 f957 	bl	8003f40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01f      	beq.n	8002d12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e012      	b.n	8002cfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	7819      	ldrb	r1, [r3, #0]
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3334      	adds	r3, #52	; 0x34
 8002ce8:	460a      	mov	r2, r1
 8002cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d9e9      	bls.n	8002cd8 <prvInitialiseNewTask+0x64>
 8002d04:	e000      	b.n	8002d08 <prvInitialiseNewTask+0x94>
			{
				break;
 8002d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d10:	e003      	b.n	8002d1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d901      	bls.n	8002d24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d20:	2304      	movs	r3, #4
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	2200      	movs	r2, #0
 8002d34:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fe9e 	bl	8002a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	3318      	adds	r3, #24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe99 	bl	8002a7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	f1c3 0205 	rsb	r2, r3, #5
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	2200      	movs	r2, #0
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	69b8      	ldr	r0, [r7, #24]
 8002d74:	f000 fc62 	bl	800363c <pxPortInitialiseStack>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d8a:	bf00      	nop
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d9c:	f000 fd8a 	bl	80038b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002da0:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <prvAddNewTaskToReadyList+0xc0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <prvAddNewTaskToReadyList+0xc0>)
 8002da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002db2:	4a29      	ldr	r2, [pc, #164]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <prvAddNewTaskToReadyList+0xc0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d110      	bne.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dc0:	f000 fb38 	bl	8003434 <prvInitialiseTaskLists>
 8002dc4:	e00d      	b.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <prvAddNewTaskToReadyList+0xc8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d802      	bhi.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <prvAddNewTaskToReadyList+0xcc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <prvAddNewTaskToReadyList+0xcc>)
 8002dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <prvAddNewTaskToReadyList+0xcc>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2201      	movs	r2, #1
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <prvAddNewTaskToReadyList+0xd0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <prvAddNewTaskToReadyList+0xd0>)
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <prvAddNewTaskToReadyList+0xd4>)
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7ff fe3a 	bl	8002a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e22:	f000 fd77 	bl	8003914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <prvAddNewTaskToReadyList+0xc8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00e      	beq.n	8002e4c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d207      	bcs.n	8002e4c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <prvAddNewTaskToReadyList+0xd8>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000200 	.word	0x20000200
 8002e58:	20000128 	.word	0x20000128
 8002e5c:	2000020c 	.word	0x2000020c
 8002e60:	2000021c 	.word	0x2000021c
 8002e64:	20000208 	.word	0x20000208
 8002e68:	2000012c 	.word	0x2000012c
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002e78:	f000 fd1c 	bl	80038b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <vTaskDelete+0x18>
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <vTaskDelete+0xf8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	e000      	b.n	8002e8a <vTaskDelete+0x1a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe5d 	bl	8002b50 <uxListRemove>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d115      	bne.n	8002ec8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	4932      	ldr	r1, [pc, #200]	; (8002f6c <vTaskDelete+0xfc>)
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <vTaskDelete+0x58>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <vTaskDelete+0x100>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <vTaskDelete+0x100>)
 8002ec6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3318      	adds	r3, #24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fe3b 	bl	8002b50 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <vTaskDelete+0x104>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <vTaskDelete+0x104>)
 8002ee2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002ee4:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <vTaskDelete+0xf8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10b      	bne.n	8002f06 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4820      	ldr	r0, [pc, #128]	; (8002f78 <vTaskDelete+0x108>)
 8002ef6:	f7ff fdce 	bl	8002a96 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <vTaskDelete+0x10c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <vTaskDelete+0x10c>)
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e009      	b.n	8002f1a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <vTaskDelete+0x110>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <vTaskDelete+0x110>)
 8002f0e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fafd 	bl	8003510 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002f16:	f000 fb0b 	bl	8003530 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002f1a:	f000 fcfb 	bl	8003914 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <vTaskDelete+0x114>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01b      	beq.n	8002f5e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <vTaskDelete+0xf8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d116      	bne.n	8002f5e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <vTaskDelete+0x118>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <vTaskDelete+0xde>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	60bb      	str	r3, [r7, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <vTaskDelete+0x11c>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000128 	.word	0x20000128
 8002f6c:	2000012c 	.word	0x2000012c
 8002f70:	20000208 	.word	0x20000208
 8002f74:	2000021c 	.word	0x2000021c
 8002f78:	200001d4 	.word	0x200001d4
 8002f7c:	200001e8 	.word	0x200001e8
 8002f80:	20000200 	.word	0x20000200
 8002f84:	2000020c 	.word	0x2000020c
 8002f88:	20000228 	.word	0x20000228
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <vTaskDelay+0x60>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <vTaskDelay+0x30>
	__asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	60bb      	str	r3, [r7, #8]
}
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fc0:	f000 f862 	bl	8003088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fad2 	bl	8003570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fcc:	f000 f86a 	bl	80030a4 <xTaskResumeAll>
 8002fd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <vTaskDelay+0x64>)
 8002fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000228 	.word	0x20000228
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <vTaskStartScheduler+0x78>)
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	2282      	movs	r2, #130	; 0x82
 800300a:	491a      	ldr	r1, [pc, #104]	; (8003074 <vTaskStartScheduler+0x7c>)
 800300c:	481a      	ldr	r0, [pc, #104]	; (8003078 <vTaskStartScheduler+0x80>)
 800300e:	f7ff fdc9 	bl	8002ba4 <xTaskCreate>
 8003012:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d116      	bne.n	8003048 <vTaskStartScheduler+0x50>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	60bb      	str	r3, [r7, #8]
}
 800302c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <vTaskStartScheduler+0x84>)
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <vTaskStartScheduler+0x88>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <vTaskStartScheduler+0x8c>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003042:	f000 fb85 	bl	8003750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003046:	e00e      	b.n	8003066 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d10a      	bne.n	8003066 <vTaskStartScheduler+0x6e>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	607b      	str	r3, [r7, #4]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <vTaskStartScheduler+0x6c>
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000224 	.word	0x20000224
 8003074:	08004870 	.word	0x08004870
 8003078:	08003405 	.word	0x08003405
 800307c:	20000220 	.word	0x20000220
 8003080:	2000020c 	.word	0x2000020c
 8003084:	20000204 	.word	0x20000204

08003088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <vTaskSuspendAll+0x18>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <vTaskSuspendAll+0x18>)
 8003094:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20000228 	.word	0x20000228

080030a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <xTaskResumeAll+0x114>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	603b      	str	r3, [r7, #0]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030d0:	f000 fbf0 	bl	80038b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <xTaskResumeAll+0x114>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	4a37      	ldr	r2, [pc, #220]	; (80031b8 <xTaskResumeAll+0x114>)
 80030dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <xTaskResumeAll+0x114>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d161      	bne.n	80031aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <xTaskResumeAll+0x118>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d05d      	beq.n	80031aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ee:	e02e      	b.n	800314e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <xTaskResumeAll+0x11c>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3318      	adds	r3, #24
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fd27 	bl	8002b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3304      	adds	r3, #4
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fd22 	bl	8002b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	2201      	movs	r2, #1
 8003112:	409a      	lsls	r2, r3
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <xTaskResumeAll+0x120>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <xTaskResumeAll+0x120>)
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <xTaskResumeAll+0x124>)
 800312c:	441a      	add	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f7ff fcae 	bl	8002a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <xTaskResumeAll+0x128>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <xTaskResumeAll+0x12c>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <xTaskResumeAll+0x11c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1cc      	bne.n	80030f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800315c:	f000 f9e8 	bl	8003530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <xTaskResumeAll+0x130>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800316c:	f000 f836 	bl	80031dc <xTaskIncrementTick>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <xTaskResumeAll+0x12c>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f1      	bne.n	800316c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <xTaskResumeAll+0x130>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <xTaskResumeAll+0x12c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003196:	2301      	movs	r3, #1
 8003198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <xTaskResumeAll+0x134>)
 800319c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031aa:	f000 fbb3 	bl	8003914 <vPortExitCritical>

	return xAlreadyYielded;
 80031ae:	68bb      	ldr	r3, [r7, #8]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000228 	.word	0x20000228
 80031bc:	20000200 	.word	0x20000200
 80031c0:	200001c0 	.word	0x200001c0
 80031c4:	20000208 	.word	0x20000208
 80031c8:	2000012c 	.word	0x2000012c
 80031cc:	20000128 	.word	0x20000128
 80031d0:	20000214 	.word	0x20000214
 80031d4:	20000210 	.word	0x20000210
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e6:	4b4e      	ldr	r3, [pc, #312]	; (8003320 <xTaskIncrementTick+0x144>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 8088 	bne.w	8003300 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031f0:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <xTaskIncrementTick+0x148>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031f8:	4a4a      	ldr	r2, [pc, #296]	; (8003324 <xTaskIncrementTick+0x148>)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d120      	bne.n	8003246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003204:	4b48      	ldr	r3, [pc, #288]	; (8003328 <xTaskIncrementTick+0x14c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <xTaskIncrementTick+0x48>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	603b      	str	r3, [r7, #0]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xTaskIncrementTick+0x46>
 8003224:	4b40      	ldr	r3, [pc, #256]	; (8003328 <xTaskIncrementTick+0x14c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b40      	ldr	r3, [pc, #256]	; (800332c <xTaskIncrementTick+0x150>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3e      	ldr	r2, [pc, #248]	; (8003328 <xTaskIncrementTick+0x14c>)
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4a3e      	ldr	r2, [pc, #248]	; (800332c <xTaskIncrementTick+0x150>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <xTaskIncrementTick+0x154>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <xTaskIncrementTick+0x154>)
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	f000 f975 	bl	8003530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <xTaskIncrementTick+0x158>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d348      	bcc.n	80032e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <xTaskIncrementTick+0x14c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <xTaskIncrementTick+0x158>)
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	601a      	str	r2, [r3, #0]
					break;
 8003262:	e03e      	b.n	80032e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <xTaskIncrementTick+0x14c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d203      	bcs.n	8003284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <xTaskIncrementTick+0x158>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003282:	e02e      	b.n	80032e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3304      	adds	r3, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fc61 	bl	8002b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3318      	adds	r3, #24
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc58 	bl	8002b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <xTaskIncrementTick+0x15c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	4a22      	ldr	r2, [pc, #136]	; (8003338 <xTaskIncrementTick+0x15c>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <xTaskIncrementTick+0x160>)
 80032c0:	441a      	add	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7ff fbe4 	bl	8002a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <xTaskIncrementTick+0x164>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3b9      	bcc.n	8003250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e0:	e7b6      	b.n	8003250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <xTaskIncrementTick+0x164>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4914      	ldr	r1, [pc, #80]	; (800333c <xTaskIncrementTick+0x160>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d907      	bls.n	800330a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e004      	b.n	800330a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <xTaskIncrementTick+0x168>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <xTaskIncrementTick+0x168>)
 8003308:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <xTaskIncrementTick+0x16c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003312:	2301      	movs	r3, #1
 8003314:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003316:	697b      	ldr	r3, [r7, #20]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000228 	.word	0x20000228
 8003324:	20000204 	.word	0x20000204
 8003328:	200001b8 	.word	0x200001b8
 800332c:	200001bc 	.word	0x200001bc
 8003330:	20000218 	.word	0x20000218
 8003334:	20000220 	.word	0x20000220
 8003338:	20000208 	.word	0x20000208
 800333c:	2000012c 	.word	0x2000012c
 8003340:	20000128 	.word	0x20000128
 8003344:	20000210 	.word	0x20000210
 8003348:	20000214 	.word	0x20000214

0800334c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003352:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <vTaskSwitchContext+0xa4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <vTaskSwitchContext+0xa8>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003360:	e03f      	b.n	80033e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <vTaskSwitchContext+0xa8>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <vTaskSwitchContext+0xac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f1c3 031f 	rsb	r3, r3, #31
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	491f      	ldr	r1, [pc, #124]	; (80033fc <vTaskSwitchContext+0xb0>)
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <vTaskSwitchContext+0x5a>
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <vTaskSwitchContext+0xb0>)
 80033b4:	4413      	add	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3308      	adds	r3, #8
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d104      	bne.n	80033d8 <vTaskSwitchContext+0x8c>
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <vTaskSwitchContext+0xb4>)
 80033e0:	6013      	str	r3, [r2, #0]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000228 	.word	0x20000228
 80033f4:	20000214 	.word	0x20000214
 80033f8:	20000208 	.word	0x20000208
 80033fc:	2000012c 	.word	0x2000012c
 8003400:	20000128 	.word	0x20000128

08003404 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800340c:	f000 f852 	bl	80034b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <prvIdleTask+0x28>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d9f9      	bls.n	800340c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <prvIdleTask+0x2c>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003428:	e7f0      	b.n	800340c <prvIdleTask+0x8>
 800342a:	bf00      	nop
 800342c:	2000012c 	.word	0x2000012c
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	e00c      	b.n	800345a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <prvInitialiseTaskLists+0x60>)
 800344c:	4413      	add	r3, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff faf4 	bl	8002a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d9ef      	bls.n	8003440 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003460:	480d      	ldr	r0, [pc, #52]	; (8003498 <prvInitialiseTaskLists+0x64>)
 8003462:	f7ff faeb 	bl	8002a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <prvInitialiseTaskLists+0x68>)
 8003468:	f7ff fae8 	bl	8002a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <prvInitialiseTaskLists+0x6c>)
 800346e:	f7ff fae5 	bl	8002a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003472:	480c      	ldr	r0, [pc, #48]	; (80034a4 <prvInitialiseTaskLists+0x70>)
 8003474:	f7ff fae2 	bl	8002a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003478:	480b      	ldr	r0, [pc, #44]	; (80034a8 <prvInitialiseTaskLists+0x74>)
 800347a:	f7ff fadf 	bl	8002a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <prvInitialiseTaskLists+0x78>)
 8003480:	4a05      	ldr	r2, [pc, #20]	; (8003498 <prvInitialiseTaskLists+0x64>)
 8003482:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <prvInitialiseTaskLists+0x7c>)
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <prvInitialiseTaskLists+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	2000012c 	.word	0x2000012c
 8003498:	20000190 	.word	0x20000190
 800349c:	200001a4 	.word	0x200001a4
 80034a0:	200001c0 	.word	0x200001c0
 80034a4:	200001d4 	.word	0x200001d4
 80034a8:	200001ec 	.word	0x200001ec
 80034ac:	200001b8 	.word	0x200001b8
 80034b0:	200001bc 	.word	0x200001bc

080034b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ba:	e019      	b.n	80034f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034bc:	f000 f9fa 	bl	80038b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <prvCheckTasksWaitingTermination+0x50>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fb3f 	bl	8002b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <prvCheckTasksWaitingTermination+0x54>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <prvCheckTasksWaitingTermination+0x54>)
 80034da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <prvCheckTasksWaitingTermination+0x58>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <prvCheckTasksWaitingTermination+0x58>)
 80034e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034e6:	f000 fa15 	bl	8003914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f810 	bl	8003510 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <prvCheckTasksWaitingTermination+0x58>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e1      	bne.n	80034bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200001d4 	.word	0x200001d4
 8003508:	20000200 	.word	0x20000200
 800350c:	200001e8 	.word	0x200001e8

08003510 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fbcb 	bl	8003cb8 <vPortFree>
			vPortFree( pxTCB );
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fbc8 	bl	8003cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <prvResetNextTaskUnblockTime+0x38>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <prvResetNextTaskUnblockTime+0x3c>)
 8003542:	f04f 32ff 	mov.w	r2, #4294967295
 8003546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003548:	e008      	b.n	800355c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <prvResetNextTaskUnblockTime+0x38>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <prvResetNextTaskUnblockTime+0x3c>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	200001b8 	.word	0x200001b8
 800356c:	20000220 	.word	0x20000220

08003570 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <prvAddCurrentTaskToDelayedList+0xb0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fae2 	bl	8002b50 <uxListRemove>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2201      	movs	r2, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4013      	ands	r3, r2
 80035a6:	4a20      	ldr	r2, [pc, #128]	; (8003628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d10a      	bne.n	80035c8 <prvAddCurrentTaskToDelayedList+0x58>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	481a      	ldr	r0, [pc, #104]	; (800362c <prvAddCurrentTaskToDelayedList+0xbc>)
 80035c2:	f7ff fa68 	bl	8002a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035c6:	e026      	b.n	8003616 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d209      	bcs.n	80035f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7ff fa76 	bl	8002ade <vListInsert>
}
 80035f2:	e010      	b.n	8003616 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7ff fa6c 	bl	8002ade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d202      	bcs.n	8003616 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003610:	4a09      	ldr	r2, [pc, #36]	; (8003638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6013      	str	r3, [r2, #0]
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000204 	.word	0x20000204
 8003624:	20000128 	.word	0x20000128
 8003628:	20000208 	.word	0x20000208
 800362c:	200001ec 	.word	0x200001ec
 8003630:	200001bc 	.word	0x200001bc
 8003634:	200001b8 	.word	0x200001b8
 8003638:	20000220 	.word	0x20000220

0800363c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b04      	subs	r3, #4
 800364c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b04      	subs	r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0201 	bic.w	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3b04      	subs	r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <pxPortInitialiseStack+0x64>)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3b14      	subs	r3, #20
 8003676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3b04      	subs	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f06f 0202 	mvn.w	r2, #2
 800368a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b20      	subs	r3, #32
 8003690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	080036a5 	.word	0x080036a5

080036a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <prvTaskExitError+0x54>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d00a      	beq.n	80036ce <prvTaskExitError+0x2a>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60fb      	str	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <prvTaskExitError+0x28>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	60bb      	str	r3, [r7, #8]
}
 80036e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036e2:	bf00      	nop
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0fc      	beq.n	80036e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	2000000c 	.word	0x2000000c
 80036fc:	00000000 	.word	0x00000000

08003700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <pxCurrentTCBConst2>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	6808      	ldr	r0, [r1, #0]
 8003706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370a:	f380 8809 	msr	PSP, r0
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8811 	msr	BASEPRI, r0
 800371a:	4770      	bx	lr
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst2>:
 8003720:	20000128 	.word	0x20000128
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <prvPortStartFirstTask+0x24>)
 800372a:	6800      	ldr	r0, [r0, #0]
 800372c:	6800      	ldr	r0, [r0, #0]
 800372e:	f380 8808 	msr	MSP, r0
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f380 8814 	msr	CONTROL, r0
 800373a:	b662      	cpsie	i
 800373c:	b661      	cpsie	f
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	df00      	svc	0
 8003748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800374a:	bf00      	nop
 800374c:	e000ed08 	.word	0xe000ed08

08003750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003756:	4b4e      	ldr	r3, [pc, #312]	; (8003890 <xPortStartScheduler+0x140>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4e      	ldr	r2, [pc, #312]	; (8003894 <xPortStartScheduler+0x144>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10a      	bne.n	8003776 <xPortStartScheduler+0x26>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	61bb      	str	r3, [r7, #24]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <xPortStartScheduler+0x140>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a47      	ldr	r2, [pc, #284]	; (8003898 <xPortStartScheduler+0x148>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10a      	bne.n	8003796 <xPortStartScheduler+0x46>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	617b      	str	r3, [r7, #20]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003796:	4b41      	ldr	r3, [pc, #260]	; (800389c <xPortStartScheduler+0x14c>)
 8003798:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <xPortStartScheduler+0x150>)
 80037bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <xPortStartScheduler+0x154>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037c4:	e009      	b.n	80037da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80037c6:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <xPortStartScheduler+0x154>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	4a35      	ldr	r2, [pc, #212]	; (80038a4 <xPortStartScheduler+0x154>)
 80037ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d0ef      	beq.n	80037c6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80037e6:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <xPortStartScheduler+0x154>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00a      	beq.n	8003808 <xPortStartScheduler+0xb8>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	613b      	str	r3, [r7, #16]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <xPortStartScheduler+0x154>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1c3 0307 	rsb	r3, r3, #7
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00a      	beq.n	800382a <xPortStartScheduler+0xda>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60fb      	str	r3, [r7, #12]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <xPortStartScheduler+0x154>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <xPortStartScheduler+0x154>)
 8003832:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <xPortStartScheduler+0x154>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <xPortStartScheduler+0x154>)
 800383e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <xPortStartScheduler+0x158>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <xPortStartScheduler+0x158>)
 800384e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003852:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <xPortStartScheduler+0x158>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <xPortStartScheduler+0x158>)
 800385a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800385e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003860:	f000 f8dc 	bl	8003a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <xPortStartScheduler+0x15c>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800386a:	f000 f8fb 	bl	8003a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xPortStartScheduler+0x160>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <xPortStartScheduler+0x160>)
 8003874:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003878:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800387a:	f7ff ff55 	bl	8003728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800387e:	f7ff fd65 	bl	800334c <vTaskSwitchContext>
	prvTaskExitError();
 8003882:	f7ff ff0f 	bl	80036a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	410fc271 	.word	0x410fc271
 8003898:	410fc270 	.word	0x410fc270
 800389c:	e000e400 	.word	0xe000e400
 80038a0:	2000022c 	.word	0x2000022c
 80038a4:	20000230 	.word	0x20000230
 80038a8:	e000ed20 	.word	0xe000ed20
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	e000ef34 	.word	0xe000ef34

080038b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	607b      	str	r3, [r7, #4]
}
 80038cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <vPortEnterCritical+0x58>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <vPortEnterCritical+0x58>)
 80038d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <vPortEnterCritical+0x58>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10f      	bne.n	8003900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <vPortEnterCritical+0x5c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <vPortEnterCritical+0x4c>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	603b      	str	r3, [r7, #0]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <vPortEnterCritical+0x4a>
	}
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	2000000c 	.word	0x2000000c
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <vPortExitCritical+0x50>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <vPortExitCritical+0x24>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	607b      	str	r3, [r7, #4]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <vPortExitCritical+0x50>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <vPortExitCritical+0x50>)
 8003940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <vPortExitCritical+0x50>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <vPortExitCritical+0x42>
 800394a:	2300      	movs	r3, #0
 800394c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
	...

08003970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003970:	f3ef 8009 	mrs	r0, PSP
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <pxCurrentTCBConst>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f01e 0f10 	tst.w	lr, #16
 8003980:	bf08      	it	eq
 8003982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003994:	f380 8811 	msr	BASEPRI, r0
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f7ff fcd4 	bl	800334c <vTaskSwitchContext>
 80039a4:	f04f 0000 	mov.w	r0, #0
 80039a8:	f380 8811 	msr	BASEPRI, r0
 80039ac:	bc09      	pop	{r0, r3}
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	6808      	ldr	r0, [r1, #0]
 80039b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b6:	f01e 0f10 	tst.w	lr, #16
 80039ba:	bf08      	it	eq
 80039bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039c0:	f380 8809 	msr	PSP, r0
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	f3af 8000 	nop.w

080039d0 <pxCurrentTCBConst>:
 80039d0:	20000128 	.word	0x20000128
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop

080039d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	607b      	str	r3, [r7, #4]
}
 80039f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039f2:	f7ff fbf3 	bl	80031dc <xTaskIncrementTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <SysTick_Handler+0x40>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f383 8811 	msr	BASEPRI, r3
}
 8003a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <vPortSetupTimerInterrupt+0x34>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <vPortSetupTimerInterrupt+0x38>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <vPortSetupTimerInterrupt+0x3c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <vPortSetupTimerInterrupt+0x40>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <vPortSetupTimerInterrupt+0x44>)
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <vPortSetupTimerInterrupt+0x34>)
 8003a40:	2207      	movs	r2, #7
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e010 	.word	0xe000e010
 8003a54:	e000e018 	.word	0xe000e018
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	10624dd3 	.word	0x10624dd3
 8003a60:	e000e014 	.word	0xe000e014

08003a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a74 <vPortEnableVFP+0x10>
 8003a68:	6801      	ldr	r1, [r0, #0]
 8003a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a6e:	6001      	str	r1, [r0, #0]
 8003a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a72:	bf00      	nop
 8003a74:	e000ed88 	.word	0xe000ed88

08003a78 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = xInsert;											\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b0a8      	sub	sp, #160	; 0xa0
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
size_t BlockSize, WantedSize;
char data[80];
WantedSize = xWantedSize;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	67fb      	str	r3, [r7, #124]	; 0x7c

	vTaskSuspendAll();
 8003a8a:	f7ff fafd 	bl	8003088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003a8e:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <pvPortMalloc+0x228>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <pvPortMalloc+0x28>
		{
			prvHeapInit();
 8003a96:	f000 f989 	bl	8003dac <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003a9a:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <pvPortMalloc+0x228>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <pvPortMalloc+0x4c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <pvPortMalloc+0x4c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80c3 	beq.w	8003c52 <pvPortMalloc+0x1da>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f200 80bd 	bhi.w	8003c52 <pvPortMalloc+0x1da>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8003ad8:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <pvPortMalloc+0x22c>)
 8003ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			pxBlock = xStart.pxNextFreeBlock;
 8003ade:	4b71      	ldr	r3, [pc, #452]	; (8003ca4 <pvPortMalloc+0x22c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ae6:	e008      	b.n	8003afa <pvPortMalloc+0x82>
			{
				pxPreviousBlock = pxBlock;
 8003ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				pxBlock = pxBlock->pxNextFreeBlock;
 8003af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d904      	bls.n	8003b10 <pvPortMalloc+0x98>
 8003b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1eb      	bne.n	8003ae8 <pvPortMalloc+0x70>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8003b10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b14:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <pvPortMalloc+0x230>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	f000 809b 	beq.w	8003c52 <pvPortMalloc+0x1da>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2208      	movs	r2, #8
 8003b24:	4413      	add	r3, r2
 8003b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b34:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2208      	movs	r2, #8
 8003b42:	0052      	lsls	r2, r2, #1
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d97c      	bls.n	8003c42 <pvPortMalloc+0x1ca>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	67bb      	str	r3, [r7, #120]	; 0x78

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b5e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8003b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8003b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b72:	677b      	str	r3, [r7, #116]	; 0x74
 8003b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	4413      	add	r3, r2
 8003b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b80:	4b48      	ldr	r3, [pc, #288]	; (8003ca4 <pvPortMalloc+0x22c>)
 8003b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b86:	e038      	b.n	8003bfa <pvPortMalloc+0x182>
 8003b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9a:	4413      	add	r3, r2
 8003b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d111      	bne.n	8003bca <pvPortMalloc+0x152>
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e01c      	b.n	8003c04 <pvPortMalloc+0x18c>
 8003bca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d10e      	bne.n	8003bf0 <pvPortMalloc+0x178>
 8003bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	441a      	add	r2, r3
 8003bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e009      	b.n	8003c04 <pvPortMalloc+0x18c>
 8003bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <pvPortMalloc+0x230>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d1c1      	bne.n	8003b88 <pvPortMalloc+0x110>
 8003c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <pvPortMalloc+0x22c>)
 8003c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c12:	e004      	b.n	8003c1e <pvPortMalloc+0x1a6>
 8003c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d8f3      	bhi.n	8003c14 <pvPortMalloc+0x19c>
 8003c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003c40:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <pvPortMalloc+0x234>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <pvPortMalloc+0x234>)
 8003c50:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c52:	f7ff fa27 	bl	80030a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

    BlockSize = xWantedSize;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	65fb      	str	r3, [r7, #92]	; 0x5c
    sprintf(data, "pvReturn: %p | heapSTRUCT_SIZE: %0d | WantedSize: %3d | BlockSize: %3d\n\r", pvReturn, heapSTRUCT_SIZE, WantedSize, BlockSize);
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f107 000c 	add.w	r0, r7, #12
 8003c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c70:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <pvPortMalloc+0x238>)
 8003c72:	f000 f96d 	bl	8003f50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc faa8 	bl	80001d0 <strlen>
 8003c80:	4603      	mov	r3, r0
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	f107 010c 	add.w	r1, r7, #12
 8003c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c8c:	4809      	ldr	r0, [pc, #36]	; (8003cb4 <pvPortMalloc+0x23c>)
 8003c8e:	f7fe fb60 	bl	8002352 <HAL_UART_Transmit>

	return pvReturn;
 8003c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3798      	adds	r7, #152	; 0x98
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001644 	.word	0x20001644
 8003ca4:	20001634 	.word	0x20001634
 8003ca8:	2000163c 	.word	0x2000163c
 8003cac:	20000010 	.word	0x20000010
 8003cb0:	08004878 	.word	0x08004878
 8003cb4:	20000094 	.word	0x20000094

08003cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	; 0x38
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d066      	beq.n	8003d98 <vPortFree+0xe0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8003cca:	2308      	movs	r3, #8
 8003ccc:	425b      	negs	r3, r3
 8003cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd0:	4413      	add	r3, r2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24

		vTaskSuspendAll();
 8003cd8:	f7ff f9d6 	bl	8003088 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	4413      	add	r3, r2
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <vPortFree+0xe8>)
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf2:	e02e      	b.n	8003d52 <vPortFree+0x9a>
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d10d      	bne.n	8003d2c <vPortFree+0x74>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	441a      	add	r2, r3
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e016      	b.n	8003d5a <vPortFree+0xa2>
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d10b      	bne.n	8003d4c <vPortFree+0x94>
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	441a      	add	r2, r3
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e006      	b.n	8003d5a <vPortFree+0xa2>
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	633b      	str	r3, [r7, #48]	; 0x30
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <vPortFree+0xec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d1cc      	bne.n	8003cf4 <vPortFree+0x3c>
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <vPortFree+0xe8>)
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d64:	e002      	b.n	8003d6c <vPortFree+0xb4>
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f6      	bhi.n	8003d66 <vPortFree+0xae>
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d84:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <vPortFree+0xf0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <vPortFree+0xf0>)
 8003d92:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8003d94:	f7ff f986 	bl	80030a4 <xTaskResumeAll>
	}
}
 8003d98:	bf00      	nop
 8003d9a:	3738      	adds	r7, #56	; 0x38
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20001634 	.word	0x20001634
 8003da4:	2000163c 	.word	0x2000163c
 8003da8:	20000010 	.word	0x20000010

08003dac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <prvHeapInit+0x48>)
 8003db4:	f023 0307 	bic.w	r3, r3, #7
 8003db8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003dba:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <prvHeapInit+0x4c>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <prvHeapInit+0x4c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <prvHeapInit+0x50>)
 8003dc8:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003dcc:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <prvHeapInit+0x50>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <prvHeapInit+0x50>)
 8003de4:	601a      	str	r2, [r3, #0]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000023c 	.word	0x2000023c
 8003df8:	20001634 	.word	0x20001634
 8003dfc:	2000163c 	.word	0x2000163c

08003e00 <vPrintFreeList>:
/*-----------------------------------------------------------*/

void vPrintFreeList(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b09a      	sub	sp, #104	; 0x68
 8003e04:	af02      	add	r7, sp, #8
     * > sprintf(data, "configADJUSTED_HEAP_SIZE: %0d xFreeBytesRemaining: %0d\n\r", ...);
     */

	char data[80];

	sprintf(data, "StartAddress\theapSTRUCT_SIZE\txBlockSize\tEndAddress\n\r");
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	492a      	ldr	r1, [pc, #168]	; (8003eb4 <vPrintFreeList+0xb4>)
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f8a0 	bl	8003f50 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)data,strlen(data),0xffff);
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc f9dc 	bl	80001d0 <strlen>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	1d39      	adds	r1, r7, #4
 8003e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e22:	4825      	ldr	r0, [pc, #148]	; (8003eb8 <vPrintFreeList+0xb8>)
 8003e24:	f7fe fa95 	bl	8002352 <HAL_UART_Transmit>

	BlockLink_t *xFree;
	xFree = &xStart;
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <vPrintFreeList+0xbc>)
 8003e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(xFree=xFree->pxNextFreeBlock; xFree!=&xEnd; xFree=xFree->pxNextFreeBlock)
 8003e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e32:	e022      	b.n	8003e7a <vPrintFreeList+0x7a>
	{
		int startaddr = xFree;
 8003e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e36:	65bb      	str	r3, [r7, #88]	; 0x58
		int endaddr = startaddr + xFree->xBlockSize;
 8003e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3e:	4413      	add	r3, r2
 8003e40:	657b      	str	r3, [r7, #84]	; 0x54
		sprintf(data, "0x%x\t%0d\t\t%0d\t\t0x%x\n\r", startaddr, heapSTRUCT_SIZE, xFree->xBlockSize, endaddr);
 8003e42:	2308      	movs	r3, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	1d38      	adds	r0, r7, #4
 8003e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	460b      	mov	r3, r1
 8003e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e56:	491a      	ldr	r1, [pc, #104]	; (8003ec0 <vPrintFreeList+0xc0>)
 8003e58:	f000 f87a 	bl	8003f50 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)data,strlen(data),0xffff);
 8003e5c:	1d3b      	adds	r3, r7, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc f9b6 	bl	80001d0 <strlen>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	1d39      	adds	r1, r7, #4
 8003e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e6e:	4812      	ldr	r0, [pc, #72]	; (8003eb8 <vPrintFreeList+0xb8>)
 8003e70:	f7fe fa6f 	bl	8002352 <HAL_UART_Transmit>
	for(xFree=xFree->pxNextFreeBlock; xFree!=&xEnd; xFree=xFree->pxNextFreeBlock)
 8003e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <vPrintFreeList+0xc4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d1d8      	bne.n	8003e34 <vPrintFreeList+0x34>
	}

	sprintf(data, "configADJUSTED_HEAP_SIZE: %0d\txFreeBytesRemaining: %0d\n\n\r", configADJUSTED_HEAP_SIZE, xFreeBytesRemaining);
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <vPrintFreeList+0xc8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	1d38      	adds	r0, r7, #4
 8003e88:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003e8c:	490f      	ldr	r1, [pc, #60]	; (8003ecc <vPrintFreeList+0xcc>)
 8003e8e:	f000 f85f 	bl	8003f50 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)data,strlen(data),0xffff);
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc f99b 	bl	80001d0 <strlen>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	1d39      	adds	r1, r7, #4
 8003ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ea4:	4804      	ldr	r0, [pc, #16]	; (8003eb8 <vPrintFreeList+0xb8>)
 8003ea6:	f7fe fa54 	bl	8002352 <HAL_UART_Transmit>
}
 8003eaa:	bf00      	nop
 8003eac:	3760      	adds	r7, #96	; 0x60
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	080048c4 	.word	0x080048c4
 8003eb8:	20000094 	.word	0x20000094
 8003ebc:	20001634 	.word	0x20001634
 8003ec0:	080048fc 	.word	0x080048fc
 8003ec4:	2000163c 	.word	0x2000163c
 8003ec8:	20000010 	.word	0x20000010
 8003ecc:	08004914 	.word	0x08004914

08003ed0 <__errno>:
 8003ed0:	4b01      	ldr	r3, [pc, #4]	; (8003ed8 <__errno+0x8>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000014 	.word	0x20000014

08003edc <__libc_init_array>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4d0d      	ldr	r5, [pc, #52]	; (8003f14 <__libc_init_array+0x38>)
 8003ee0:	4c0d      	ldr	r4, [pc, #52]	; (8003f18 <__libc_init_array+0x3c>)
 8003ee2:	1b64      	subs	r4, r4, r5
 8003ee4:	10a4      	asrs	r4, r4, #2
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	42a6      	cmp	r6, r4
 8003eea:	d109      	bne.n	8003f00 <__libc_init_array+0x24>
 8003eec:	4d0b      	ldr	r5, [pc, #44]	; (8003f1c <__libc_init_array+0x40>)
 8003eee:	4c0c      	ldr	r4, [pc, #48]	; (8003f20 <__libc_init_array+0x44>)
 8003ef0:	f000 fc96 	bl	8004820 <_init>
 8003ef4:	1b64      	subs	r4, r4, r5
 8003ef6:	10a4      	asrs	r4, r4, #2
 8003ef8:	2600      	movs	r6, #0
 8003efa:	42a6      	cmp	r6, r4
 8003efc:	d105      	bne.n	8003f0a <__libc_init_array+0x2e>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f04:	4798      	blx	r3
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7ee      	b.n	8003ee8 <__libc_init_array+0xc>
 8003f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0e:	4798      	blx	r3
 8003f10:	3601      	adds	r6, #1
 8003f12:	e7f2      	b.n	8003efa <__libc_init_array+0x1e>
 8003f14:	080049a4 	.word	0x080049a4
 8003f18:	080049a4 	.word	0x080049a4
 8003f1c:	080049a4 	.word	0x080049a4
 8003f20:	080049a8 	.word	0x080049a8

08003f24 <memcpy>:
 8003f24:	440a      	add	r2, r1
 8003f26:	4291      	cmp	r1, r2
 8003f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f2c:	d100      	bne.n	8003f30 <memcpy+0xc>
 8003f2e:	4770      	bx	lr
 8003f30:	b510      	push	{r4, lr}
 8003f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	d1f9      	bne.n	8003f32 <memcpy+0xe>
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <memset>:
 8003f40:	4402      	add	r2, r0
 8003f42:	4603      	mov	r3, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <siprintf>:
 8003f50:	b40e      	push	{r1, r2, r3}
 8003f52:	b500      	push	{lr}
 8003f54:	b09c      	sub	sp, #112	; 0x70
 8003f56:	ab1d      	add	r3, sp, #116	; 0x74
 8003f58:	9002      	str	r0, [sp, #8]
 8003f5a:	9006      	str	r0, [sp, #24]
 8003f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f60:	4809      	ldr	r0, [pc, #36]	; (8003f88 <siprintf+0x38>)
 8003f62:	9107      	str	r1, [sp, #28]
 8003f64:	9104      	str	r1, [sp, #16]
 8003f66:	4909      	ldr	r1, [pc, #36]	; (8003f8c <siprintf+0x3c>)
 8003f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f6c:	9105      	str	r1, [sp, #20]
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	a902      	add	r1, sp, #8
 8003f74:	f000 f870 	bl	8004058 <_svfiprintf_r>
 8003f78:	9b02      	ldr	r3, [sp, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	b01c      	add	sp, #112	; 0x70
 8003f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f84:	b003      	add	sp, #12
 8003f86:	4770      	bx	lr
 8003f88:	20000014 	.word	0x20000014
 8003f8c:	ffff0208 	.word	0xffff0208

08003f90 <strcpy>:
 8003f90:	4603      	mov	r3, r0
 8003f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f96:	f803 2b01 	strb.w	r2, [r3], #1
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d1f9      	bne.n	8003f92 <strcpy+0x2>
 8003f9e:	4770      	bx	lr

08003fa0 <__ssputs_r>:
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	688e      	ldr	r6, [r1, #8]
 8003fa6:	429e      	cmp	r6, r3
 8003fa8:	4682      	mov	sl, r0
 8003faa:	460c      	mov	r4, r1
 8003fac:	4690      	mov	r8, r2
 8003fae:	461f      	mov	r7, r3
 8003fb0:	d838      	bhi.n	8004024 <__ssputs_r+0x84>
 8003fb2:	898a      	ldrh	r2, [r1, #12]
 8003fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fb8:	d032      	beq.n	8004020 <__ssputs_r+0x80>
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	6909      	ldr	r1, [r1, #16]
 8003fbe:	eba5 0901 	sub.w	r9, r5, r1
 8003fc2:	6965      	ldr	r5, [r4, #20]
 8003fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fcc:	3301      	adds	r3, #1
 8003fce:	444b      	add	r3, r9
 8003fd0:	106d      	asrs	r5, r5, #1
 8003fd2:	429d      	cmp	r5, r3
 8003fd4:	bf38      	it	cc
 8003fd6:	461d      	movcc	r5, r3
 8003fd8:	0553      	lsls	r3, r2, #21
 8003fda:	d531      	bpl.n	8004040 <__ssputs_r+0xa0>
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f000 fb55 	bl	800468c <_malloc_r>
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	b950      	cbnz	r0, 8003ffc <__ssputs_r+0x5c>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	f8ca 3000 	str.w	r3, [sl]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffc:	6921      	ldr	r1, [r4, #16]
 8003ffe:	464a      	mov	r2, r9
 8004000:	f7ff ff90 	bl	8003f24 <memcpy>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800400a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	6126      	str	r6, [r4, #16]
 8004012:	6165      	str	r5, [r4, #20]
 8004014:	444e      	add	r6, r9
 8004016:	eba5 0509 	sub.w	r5, r5, r9
 800401a:	6026      	str	r6, [r4, #0]
 800401c:	60a5      	str	r5, [r4, #8]
 800401e:	463e      	mov	r6, r7
 8004020:	42be      	cmp	r6, r7
 8004022:	d900      	bls.n	8004026 <__ssputs_r+0x86>
 8004024:	463e      	mov	r6, r7
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	4632      	mov	r2, r6
 800402a:	4641      	mov	r1, r8
 800402c:	f000 faa8 	bl	8004580 <memmove>
 8004030:	68a3      	ldr	r3, [r4, #8]
 8004032:	1b9b      	subs	r3, r3, r6
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	4433      	add	r3, r6
 800403a:	6023      	str	r3, [r4, #0]
 800403c:	2000      	movs	r0, #0
 800403e:	e7db      	b.n	8003ff8 <__ssputs_r+0x58>
 8004040:	462a      	mov	r2, r5
 8004042:	f000 fb97 	bl	8004774 <_realloc_r>
 8004046:	4606      	mov	r6, r0
 8004048:	2800      	cmp	r0, #0
 800404a:	d1e1      	bne.n	8004010 <__ssputs_r+0x70>
 800404c:	6921      	ldr	r1, [r4, #16]
 800404e:	4650      	mov	r0, sl
 8004050:	f000 fab0 	bl	80045b4 <_free_r>
 8004054:	e7c7      	b.n	8003fe6 <__ssputs_r+0x46>
	...

08004058 <_svfiprintf_r>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	4698      	mov	r8, r3
 800405e:	898b      	ldrh	r3, [r1, #12]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	b09d      	sub	sp, #116	; 0x74
 8004064:	4607      	mov	r7, r0
 8004066:	460d      	mov	r5, r1
 8004068:	4614      	mov	r4, r2
 800406a:	d50e      	bpl.n	800408a <_svfiprintf_r+0x32>
 800406c:	690b      	ldr	r3, [r1, #16]
 800406e:	b963      	cbnz	r3, 800408a <_svfiprintf_r+0x32>
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	f000 fb0b 	bl	800468c <_malloc_r>
 8004076:	6028      	str	r0, [r5, #0]
 8004078:	6128      	str	r0, [r5, #16]
 800407a:	b920      	cbnz	r0, 8004086 <_svfiprintf_r+0x2e>
 800407c:	230c      	movs	r3, #12
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	e0d1      	b.n	800422a <_svfiprintf_r+0x1d2>
 8004086:	2340      	movs	r3, #64	; 0x40
 8004088:	616b      	str	r3, [r5, #20]
 800408a:	2300      	movs	r3, #0
 800408c:	9309      	str	r3, [sp, #36]	; 0x24
 800408e:	2320      	movs	r3, #32
 8004090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004094:	f8cd 800c 	str.w	r8, [sp, #12]
 8004098:	2330      	movs	r3, #48	; 0x30
 800409a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004244 <_svfiprintf_r+0x1ec>
 800409e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040a2:	f04f 0901 	mov.w	r9, #1
 80040a6:	4623      	mov	r3, r4
 80040a8:	469a      	mov	sl, r3
 80040aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040ae:	b10a      	cbz	r2, 80040b4 <_svfiprintf_r+0x5c>
 80040b0:	2a25      	cmp	r2, #37	; 0x25
 80040b2:	d1f9      	bne.n	80040a8 <_svfiprintf_r+0x50>
 80040b4:	ebba 0b04 	subs.w	fp, sl, r4
 80040b8:	d00b      	beq.n	80040d2 <_svfiprintf_r+0x7a>
 80040ba:	465b      	mov	r3, fp
 80040bc:	4622      	mov	r2, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7ff ff6d 	bl	8003fa0 <__ssputs_r>
 80040c6:	3001      	adds	r0, #1
 80040c8:	f000 80aa 	beq.w	8004220 <_svfiprintf_r+0x1c8>
 80040cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ce:	445a      	add	r2, fp
 80040d0:	9209      	str	r2, [sp, #36]	; 0x24
 80040d2:	f89a 3000 	ldrb.w	r3, [sl]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80a2 	beq.w	8004220 <_svfiprintf_r+0x1c8>
 80040dc:	2300      	movs	r3, #0
 80040de:	f04f 32ff 	mov.w	r2, #4294967295
 80040e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040e6:	f10a 0a01 	add.w	sl, sl, #1
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	9307      	str	r3, [sp, #28]
 80040ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040f2:	931a      	str	r3, [sp, #104]	; 0x68
 80040f4:	4654      	mov	r4, sl
 80040f6:	2205      	movs	r2, #5
 80040f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040fc:	4851      	ldr	r0, [pc, #324]	; (8004244 <_svfiprintf_r+0x1ec>)
 80040fe:	f7fc f86f 	bl	80001e0 <memchr>
 8004102:	9a04      	ldr	r2, [sp, #16]
 8004104:	b9d8      	cbnz	r0, 800413e <_svfiprintf_r+0xe6>
 8004106:	06d0      	lsls	r0, r2, #27
 8004108:	bf44      	itt	mi
 800410a:	2320      	movmi	r3, #32
 800410c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004110:	0711      	lsls	r1, r2, #28
 8004112:	bf44      	itt	mi
 8004114:	232b      	movmi	r3, #43	; 0x2b
 8004116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800411a:	f89a 3000 	ldrb.w	r3, [sl]
 800411e:	2b2a      	cmp	r3, #42	; 0x2a
 8004120:	d015      	beq.n	800414e <_svfiprintf_r+0xf6>
 8004122:	9a07      	ldr	r2, [sp, #28]
 8004124:	4654      	mov	r4, sl
 8004126:	2000      	movs	r0, #0
 8004128:	f04f 0c0a 	mov.w	ip, #10
 800412c:	4621      	mov	r1, r4
 800412e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004132:	3b30      	subs	r3, #48	; 0x30
 8004134:	2b09      	cmp	r3, #9
 8004136:	d94e      	bls.n	80041d6 <_svfiprintf_r+0x17e>
 8004138:	b1b0      	cbz	r0, 8004168 <_svfiprintf_r+0x110>
 800413a:	9207      	str	r2, [sp, #28]
 800413c:	e014      	b.n	8004168 <_svfiprintf_r+0x110>
 800413e:	eba0 0308 	sub.w	r3, r0, r8
 8004142:	fa09 f303 	lsl.w	r3, r9, r3
 8004146:	4313      	orrs	r3, r2
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	46a2      	mov	sl, r4
 800414c:	e7d2      	b.n	80040f4 <_svfiprintf_r+0x9c>
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	1d19      	adds	r1, r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	9103      	str	r1, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	bfbb      	ittet	lt
 800415a:	425b      	neglt	r3, r3
 800415c:	f042 0202 	orrlt.w	r2, r2, #2
 8004160:	9307      	strge	r3, [sp, #28]
 8004162:	9307      	strlt	r3, [sp, #28]
 8004164:	bfb8      	it	lt
 8004166:	9204      	strlt	r2, [sp, #16]
 8004168:	7823      	ldrb	r3, [r4, #0]
 800416a:	2b2e      	cmp	r3, #46	; 0x2e
 800416c:	d10c      	bne.n	8004188 <_svfiprintf_r+0x130>
 800416e:	7863      	ldrb	r3, [r4, #1]
 8004170:	2b2a      	cmp	r3, #42	; 0x2a
 8004172:	d135      	bne.n	80041e0 <_svfiprintf_r+0x188>
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	9203      	str	r2, [sp, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	bfb8      	it	lt
 8004180:	f04f 33ff 	movlt.w	r3, #4294967295
 8004184:	3402      	adds	r4, #2
 8004186:	9305      	str	r3, [sp, #20]
 8004188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004254 <_svfiprintf_r+0x1fc>
 800418c:	7821      	ldrb	r1, [r4, #0]
 800418e:	2203      	movs	r2, #3
 8004190:	4650      	mov	r0, sl
 8004192:	f7fc f825 	bl	80001e0 <memchr>
 8004196:	b140      	cbz	r0, 80041aa <_svfiprintf_r+0x152>
 8004198:	2340      	movs	r3, #64	; 0x40
 800419a:	eba0 000a 	sub.w	r0, r0, sl
 800419e:	fa03 f000 	lsl.w	r0, r3, r0
 80041a2:	9b04      	ldr	r3, [sp, #16]
 80041a4:	4303      	orrs	r3, r0
 80041a6:	3401      	adds	r4, #1
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ae:	4826      	ldr	r0, [pc, #152]	; (8004248 <_svfiprintf_r+0x1f0>)
 80041b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041b4:	2206      	movs	r2, #6
 80041b6:	f7fc f813 	bl	80001e0 <memchr>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d038      	beq.n	8004230 <_svfiprintf_r+0x1d8>
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <_svfiprintf_r+0x1f4>)
 80041c0:	bb1b      	cbnz	r3, 800420a <_svfiprintf_r+0x1b2>
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	3307      	adds	r3, #7
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	3308      	adds	r3, #8
 80041cc:	9303      	str	r3, [sp, #12]
 80041ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d0:	4433      	add	r3, r6
 80041d2:	9309      	str	r3, [sp, #36]	; 0x24
 80041d4:	e767      	b.n	80040a6 <_svfiprintf_r+0x4e>
 80041d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041da:	460c      	mov	r4, r1
 80041dc:	2001      	movs	r0, #1
 80041de:	e7a5      	b.n	800412c <_svfiprintf_r+0xd4>
 80041e0:	2300      	movs	r3, #0
 80041e2:	3401      	adds	r4, #1
 80041e4:	9305      	str	r3, [sp, #20]
 80041e6:	4619      	mov	r1, r3
 80041e8:	f04f 0c0a 	mov.w	ip, #10
 80041ec:	4620      	mov	r0, r4
 80041ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041f2:	3a30      	subs	r2, #48	; 0x30
 80041f4:	2a09      	cmp	r2, #9
 80041f6:	d903      	bls.n	8004200 <_svfiprintf_r+0x1a8>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0c5      	beq.n	8004188 <_svfiprintf_r+0x130>
 80041fc:	9105      	str	r1, [sp, #20]
 80041fe:	e7c3      	b.n	8004188 <_svfiprintf_r+0x130>
 8004200:	fb0c 2101 	mla	r1, ip, r1, r2
 8004204:	4604      	mov	r4, r0
 8004206:	2301      	movs	r3, #1
 8004208:	e7f0      	b.n	80041ec <_svfiprintf_r+0x194>
 800420a:	ab03      	add	r3, sp, #12
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	462a      	mov	r2, r5
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <_svfiprintf_r+0x1f8>)
 8004212:	a904      	add	r1, sp, #16
 8004214:	4638      	mov	r0, r7
 8004216:	f3af 8000 	nop.w
 800421a:	1c42      	adds	r2, r0, #1
 800421c:	4606      	mov	r6, r0
 800421e:	d1d6      	bne.n	80041ce <_svfiprintf_r+0x176>
 8004220:	89ab      	ldrh	r3, [r5, #12]
 8004222:	065b      	lsls	r3, r3, #25
 8004224:	f53f af2c 	bmi.w	8004080 <_svfiprintf_r+0x28>
 8004228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800422a:	b01d      	add	sp, #116	; 0x74
 800422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004230:	ab03      	add	r3, sp, #12
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	462a      	mov	r2, r5
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <_svfiprintf_r+0x1f8>)
 8004238:	a904      	add	r1, sp, #16
 800423a:	4638      	mov	r0, r7
 800423c:	f000 f87a 	bl	8004334 <_printf_i>
 8004240:	e7eb      	b.n	800421a <_svfiprintf_r+0x1c2>
 8004242:	bf00      	nop
 8004244:	08004968 	.word	0x08004968
 8004248:	08004972 	.word	0x08004972
 800424c:	00000000 	.word	0x00000000
 8004250:	08003fa1 	.word	0x08003fa1
 8004254:	0800496e 	.word	0x0800496e

08004258 <_printf_common>:
 8004258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800425c:	4616      	mov	r6, r2
 800425e:	4699      	mov	r9, r3
 8004260:	688a      	ldr	r2, [r1, #8]
 8004262:	690b      	ldr	r3, [r1, #16]
 8004264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004268:	4293      	cmp	r3, r2
 800426a:	bfb8      	it	lt
 800426c:	4613      	movlt	r3, r2
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004274:	4607      	mov	r7, r0
 8004276:	460c      	mov	r4, r1
 8004278:	b10a      	cbz	r2, 800427e <_printf_common+0x26>
 800427a:	3301      	adds	r3, #1
 800427c:	6033      	str	r3, [r6, #0]
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	0699      	lsls	r1, r3, #26
 8004282:	bf42      	ittt	mi
 8004284:	6833      	ldrmi	r3, [r6, #0]
 8004286:	3302      	addmi	r3, #2
 8004288:	6033      	strmi	r3, [r6, #0]
 800428a:	6825      	ldr	r5, [r4, #0]
 800428c:	f015 0506 	ands.w	r5, r5, #6
 8004290:	d106      	bne.n	80042a0 <_printf_common+0x48>
 8004292:	f104 0a19 	add.w	sl, r4, #25
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	6832      	ldr	r2, [r6, #0]
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	42ab      	cmp	r3, r5
 800429e:	dc26      	bgt.n	80042ee <_printf_common+0x96>
 80042a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042a4:	1e13      	subs	r3, r2, #0
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	bf18      	it	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	0692      	lsls	r2, r2, #26
 80042ae:	d42b      	bmi.n	8004308 <_printf_common+0xb0>
 80042b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b4:	4649      	mov	r1, r9
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c0      	blx	r8
 80042ba:	3001      	adds	r0, #1
 80042bc:	d01e      	beq.n	80042fc <_printf_common+0xa4>
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	68e5      	ldr	r5, [r4, #12]
 80042c2:	6832      	ldr	r2, [r6, #0]
 80042c4:	f003 0306 	and.w	r3, r3, #6
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	bf08      	it	eq
 80042cc:	1aad      	subeq	r5, r5, r2
 80042ce:	68a3      	ldr	r3, [r4, #8]
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	bf0c      	ite	eq
 80042d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d8:	2500      	movne	r5, #0
 80042da:	4293      	cmp	r3, r2
 80042dc:	bfc4      	itt	gt
 80042de:	1a9b      	subgt	r3, r3, r2
 80042e0:	18ed      	addgt	r5, r5, r3
 80042e2:	2600      	movs	r6, #0
 80042e4:	341a      	adds	r4, #26
 80042e6:	42b5      	cmp	r5, r6
 80042e8:	d11a      	bne.n	8004320 <_printf_common+0xc8>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e008      	b.n	8004300 <_printf_common+0xa8>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4652      	mov	r2, sl
 80042f2:	4649      	mov	r1, r9
 80042f4:	4638      	mov	r0, r7
 80042f6:	47c0      	blx	r8
 80042f8:	3001      	adds	r0, #1
 80042fa:	d103      	bne.n	8004304 <_printf_common+0xac>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	3501      	adds	r5, #1
 8004306:	e7c6      	b.n	8004296 <_printf_common+0x3e>
 8004308:	18e1      	adds	r1, r4, r3
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	2030      	movs	r0, #48	; 0x30
 800430e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004312:	4422      	add	r2, r4
 8004314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431c:	3302      	adds	r3, #2
 800431e:	e7c7      	b.n	80042b0 <_printf_common+0x58>
 8004320:	2301      	movs	r3, #1
 8004322:	4622      	mov	r2, r4
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d0e6      	beq.n	80042fc <_printf_common+0xa4>
 800432e:	3601      	adds	r6, #1
 8004330:	e7d9      	b.n	80042e6 <_printf_common+0x8e>
	...

08004334 <_printf_i>:
 8004334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	7e0f      	ldrb	r7, [r1, #24]
 800433a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800433c:	2f78      	cmp	r7, #120	; 0x78
 800433e:	4691      	mov	r9, r2
 8004340:	4680      	mov	r8, r0
 8004342:	460c      	mov	r4, r1
 8004344:	469a      	mov	sl, r3
 8004346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800434a:	d807      	bhi.n	800435c <_printf_i+0x28>
 800434c:	2f62      	cmp	r7, #98	; 0x62
 800434e:	d80a      	bhi.n	8004366 <_printf_i+0x32>
 8004350:	2f00      	cmp	r7, #0
 8004352:	f000 80d8 	beq.w	8004506 <_printf_i+0x1d2>
 8004356:	2f58      	cmp	r7, #88	; 0x58
 8004358:	f000 80a3 	beq.w	80044a2 <_printf_i+0x16e>
 800435c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004364:	e03a      	b.n	80043dc <_printf_i+0xa8>
 8004366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800436a:	2b15      	cmp	r3, #21
 800436c:	d8f6      	bhi.n	800435c <_printf_i+0x28>
 800436e:	a101      	add	r1, pc, #4	; (adr r1, 8004374 <_printf_i+0x40>)
 8004370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004374:	080043cd 	.word	0x080043cd
 8004378:	080043e1 	.word	0x080043e1
 800437c:	0800435d 	.word	0x0800435d
 8004380:	0800435d 	.word	0x0800435d
 8004384:	0800435d 	.word	0x0800435d
 8004388:	0800435d 	.word	0x0800435d
 800438c:	080043e1 	.word	0x080043e1
 8004390:	0800435d 	.word	0x0800435d
 8004394:	0800435d 	.word	0x0800435d
 8004398:	0800435d 	.word	0x0800435d
 800439c:	0800435d 	.word	0x0800435d
 80043a0:	080044ed 	.word	0x080044ed
 80043a4:	08004411 	.word	0x08004411
 80043a8:	080044cf 	.word	0x080044cf
 80043ac:	0800435d 	.word	0x0800435d
 80043b0:	0800435d 	.word	0x0800435d
 80043b4:	0800450f 	.word	0x0800450f
 80043b8:	0800435d 	.word	0x0800435d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800435d 	.word	0x0800435d
 80043c4:	0800435d 	.word	0x0800435d
 80043c8:	080044d7 	.word	0x080044d7
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	1d1a      	adds	r2, r3, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	602a      	str	r2, [r5, #0]
 80043d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043dc:	2301      	movs	r3, #1
 80043de:	e0a3      	b.n	8004528 <_printf_i+0x1f4>
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	6829      	ldr	r1, [r5, #0]
 80043e4:	0606      	lsls	r6, r0, #24
 80043e6:	f101 0304 	add.w	r3, r1, #4
 80043ea:	d50a      	bpl.n	8004402 <_printf_i+0xce>
 80043ec:	680e      	ldr	r6, [r1, #0]
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	da03      	bge.n	80043fc <_printf_i+0xc8>
 80043f4:	232d      	movs	r3, #45	; 0x2d
 80043f6:	4276      	negs	r6, r6
 80043f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fc:	485e      	ldr	r0, [pc, #376]	; (8004578 <_printf_i+0x244>)
 80043fe:	230a      	movs	r3, #10
 8004400:	e019      	b.n	8004436 <_printf_i+0x102>
 8004402:	680e      	ldr	r6, [r1, #0]
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800440a:	bf18      	it	ne
 800440c:	b236      	sxthne	r6, r6
 800440e:	e7ef      	b.n	80043f0 <_printf_i+0xbc>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1d19      	adds	r1, r3, #4
 8004416:	6029      	str	r1, [r5, #0]
 8004418:	0601      	lsls	r1, r0, #24
 800441a:	d501      	bpl.n	8004420 <_printf_i+0xec>
 800441c:	681e      	ldr	r6, [r3, #0]
 800441e:	e002      	b.n	8004426 <_printf_i+0xf2>
 8004420:	0646      	lsls	r6, r0, #25
 8004422:	d5fb      	bpl.n	800441c <_printf_i+0xe8>
 8004424:	881e      	ldrh	r6, [r3, #0]
 8004426:	4854      	ldr	r0, [pc, #336]	; (8004578 <_printf_i+0x244>)
 8004428:	2f6f      	cmp	r7, #111	; 0x6f
 800442a:	bf0c      	ite	eq
 800442c:	2308      	moveq	r3, #8
 800442e:	230a      	movne	r3, #10
 8004430:	2100      	movs	r1, #0
 8004432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004436:	6865      	ldr	r5, [r4, #4]
 8004438:	60a5      	str	r5, [r4, #8]
 800443a:	2d00      	cmp	r5, #0
 800443c:	bfa2      	ittt	ge
 800443e:	6821      	ldrge	r1, [r4, #0]
 8004440:	f021 0104 	bicge.w	r1, r1, #4
 8004444:	6021      	strge	r1, [r4, #0]
 8004446:	b90e      	cbnz	r6, 800444c <_printf_i+0x118>
 8004448:	2d00      	cmp	r5, #0
 800444a:	d04d      	beq.n	80044e8 <_printf_i+0x1b4>
 800444c:	4615      	mov	r5, r2
 800444e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004452:	fb03 6711 	mls	r7, r3, r1, r6
 8004456:	5dc7      	ldrb	r7, [r0, r7]
 8004458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800445c:	4637      	mov	r7, r6
 800445e:	42bb      	cmp	r3, r7
 8004460:	460e      	mov	r6, r1
 8004462:	d9f4      	bls.n	800444e <_printf_i+0x11a>
 8004464:	2b08      	cmp	r3, #8
 8004466:	d10b      	bne.n	8004480 <_printf_i+0x14c>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	07de      	lsls	r6, r3, #31
 800446c:	d508      	bpl.n	8004480 <_printf_i+0x14c>
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	4299      	cmp	r1, r3
 8004474:	bfde      	ittt	le
 8004476:	2330      	movle	r3, #48	; 0x30
 8004478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800447c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004480:	1b52      	subs	r2, r2, r5
 8004482:	6122      	str	r2, [r4, #16]
 8004484:	f8cd a000 	str.w	sl, [sp]
 8004488:	464b      	mov	r3, r9
 800448a:	aa03      	add	r2, sp, #12
 800448c:	4621      	mov	r1, r4
 800448e:	4640      	mov	r0, r8
 8004490:	f7ff fee2 	bl	8004258 <_printf_common>
 8004494:	3001      	adds	r0, #1
 8004496:	d14c      	bne.n	8004532 <_printf_i+0x1fe>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	b004      	add	sp, #16
 800449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a2:	4835      	ldr	r0, [pc, #212]	; (8004578 <_printf_i+0x244>)
 80044a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044a8:	6829      	ldr	r1, [r5, #0]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80044b0:	6029      	str	r1, [r5, #0]
 80044b2:	061d      	lsls	r5, r3, #24
 80044b4:	d514      	bpl.n	80044e0 <_printf_i+0x1ac>
 80044b6:	07df      	lsls	r7, r3, #31
 80044b8:	bf44      	itt	mi
 80044ba:	f043 0320 	orrmi.w	r3, r3, #32
 80044be:	6023      	strmi	r3, [r4, #0]
 80044c0:	b91e      	cbnz	r6, 80044ca <_printf_i+0x196>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f023 0320 	bic.w	r3, r3, #32
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	2310      	movs	r3, #16
 80044cc:	e7b0      	b.n	8004430 <_printf_i+0xfc>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	2378      	movs	r3, #120	; 0x78
 80044d8:	4828      	ldr	r0, [pc, #160]	; (800457c <_printf_i+0x248>)
 80044da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044de:	e7e3      	b.n	80044a8 <_printf_i+0x174>
 80044e0:	0659      	lsls	r1, r3, #25
 80044e2:	bf48      	it	mi
 80044e4:	b2b6      	uxthmi	r6, r6
 80044e6:	e7e6      	b.n	80044b6 <_printf_i+0x182>
 80044e8:	4615      	mov	r5, r2
 80044ea:	e7bb      	b.n	8004464 <_printf_i+0x130>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	6826      	ldr	r6, [r4, #0]
 80044f0:	6961      	ldr	r1, [r4, #20]
 80044f2:	1d18      	adds	r0, r3, #4
 80044f4:	6028      	str	r0, [r5, #0]
 80044f6:	0635      	lsls	r5, r6, #24
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	d501      	bpl.n	8004500 <_printf_i+0x1cc>
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	e002      	b.n	8004506 <_printf_i+0x1d2>
 8004500:	0670      	lsls	r0, r6, #25
 8004502:	d5fb      	bpl.n	80044fc <_printf_i+0x1c8>
 8004504:	8019      	strh	r1, [r3, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	4615      	mov	r5, r2
 800450c:	e7ba      	b.n	8004484 <_printf_i+0x150>
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	681d      	ldr	r5, [r3, #0]
 8004516:	6862      	ldr	r2, [r4, #4]
 8004518:	2100      	movs	r1, #0
 800451a:	4628      	mov	r0, r5
 800451c:	f7fb fe60 	bl	80001e0 <memchr>
 8004520:	b108      	cbz	r0, 8004526 <_printf_i+0x1f2>
 8004522:	1b40      	subs	r0, r0, r5
 8004524:	6060      	str	r0, [r4, #4]
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	2300      	movs	r3, #0
 800452c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004530:	e7a8      	b.n	8004484 <_printf_i+0x150>
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	462a      	mov	r2, r5
 8004536:	4649      	mov	r1, r9
 8004538:	4640      	mov	r0, r8
 800453a:	47d0      	blx	sl
 800453c:	3001      	adds	r0, #1
 800453e:	d0ab      	beq.n	8004498 <_printf_i+0x164>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	079b      	lsls	r3, r3, #30
 8004544:	d413      	bmi.n	800456e <_printf_i+0x23a>
 8004546:	68e0      	ldr	r0, [r4, #12]
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	4298      	cmp	r0, r3
 800454c:	bfb8      	it	lt
 800454e:	4618      	movlt	r0, r3
 8004550:	e7a4      	b.n	800449c <_printf_i+0x168>
 8004552:	2301      	movs	r3, #1
 8004554:	4632      	mov	r2, r6
 8004556:	4649      	mov	r1, r9
 8004558:	4640      	mov	r0, r8
 800455a:	47d0      	blx	sl
 800455c:	3001      	adds	r0, #1
 800455e:	d09b      	beq.n	8004498 <_printf_i+0x164>
 8004560:	3501      	adds	r5, #1
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	9903      	ldr	r1, [sp, #12]
 8004566:	1a5b      	subs	r3, r3, r1
 8004568:	42ab      	cmp	r3, r5
 800456a:	dcf2      	bgt.n	8004552 <_printf_i+0x21e>
 800456c:	e7eb      	b.n	8004546 <_printf_i+0x212>
 800456e:	2500      	movs	r5, #0
 8004570:	f104 0619 	add.w	r6, r4, #25
 8004574:	e7f5      	b.n	8004562 <_printf_i+0x22e>
 8004576:	bf00      	nop
 8004578:	08004979 	.word	0x08004979
 800457c:	0800498a 	.word	0x0800498a

08004580 <memmove>:
 8004580:	4288      	cmp	r0, r1
 8004582:	b510      	push	{r4, lr}
 8004584:	eb01 0402 	add.w	r4, r1, r2
 8004588:	d902      	bls.n	8004590 <memmove+0x10>
 800458a:	4284      	cmp	r4, r0
 800458c:	4623      	mov	r3, r4
 800458e:	d807      	bhi.n	80045a0 <memmove+0x20>
 8004590:	1e43      	subs	r3, r0, #1
 8004592:	42a1      	cmp	r1, r4
 8004594:	d008      	beq.n	80045a8 <memmove+0x28>
 8004596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800459e:	e7f8      	b.n	8004592 <memmove+0x12>
 80045a0:	4402      	add	r2, r0
 80045a2:	4601      	mov	r1, r0
 80045a4:	428a      	cmp	r2, r1
 80045a6:	d100      	bne.n	80045aa <memmove+0x2a>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045b2:	e7f7      	b.n	80045a4 <memmove+0x24>

080045b4 <_free_r>:
 80045b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045b6:	2900      	cmp	r1, #0
 80045b8:	d044      	beq.n	8004644 <_free_r+0x90>
 80045ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045be:	9001      	str	r0, [sp, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f1a1 0404 	sub.w	r4, r1, #4
 80045c6:	bfb8      	it	lt
 80045c8:	18e4      	addlt	r4, r4, r3
 80045ca:	f000 f913 	bl	80047f4 <__malloc_lock>
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <_free_r+0x94>)
 80045d0:	9801      	ldr	r0, [sp, #4]
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	b933      	cbnz	r3, 80045e4 <_free_r+0x30>
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	6014      	str	r4, [r2, #0]
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045e0:	f000 b90e 	b.w	8004800 <__malloc_unlock>
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	d908      	bls.n	80045fa <_free_r+0x46>
 80045e8:	6825      	ldr	r5, [r4, #0]
 80045ea:	1961      	adds	r1, r4, r5
 80045ec:	428b      	cmp	r3, r1
 80045ee:	bf01      	itttt	eq
 80045f0:	6819      	ldreq	r1, [r3, #0]
 80045f2:	685b      	ldreq	r3, [r3, #4]
 80045f4:	1949      	addeq	r1, r1, r5
 80045f6:	6021      	streq	r1, [r4, #0]
 80045f8:	e7ed      	b.n	80045d6 <_free_r+0x22>
 80045fa:	461a      	mov	r2, r3
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b10b      	cbz	r3, 8004604 <_free_r+0x50>
 8004600:	42a3      	cmp	r3, r4
 8004602:	d9fa      	bls.n	80045fa <_free_r+0x46>
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	1855      	adds	r5, r2, r1
 8004608:	42a5      	cmp	r5, r4
 800460a:	d10b      	bne.n	8004624 <_free_r+0x70>
 800460c:	6824      	ldr	r4, [r4, #0]
 800460e:	4421      	add	r1, r4
 8004610:	1854      	adds	r4, r2, r1
 8004612:	42a3      	cmp	r3, r4
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	d1e0      	bne.n	80045da <_free_r+0x26>
 8004618:	681c      	ldr	r4, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	6053      	str	r3, [r2, #4]
 800461e:	4421      	add	r1, r4
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	e7da      	b.n	80045da <_free_r+0x26>
 8004624:	d902      	bls.n	800462c <_free_r+0x78>
 8004626:	230c      	movs	r3, #12
 8004628:	6003      	str	r3, [r0, #0]
 800462a:	e7d6      	b.n	80045da <_free_r+0x26>
 800462c:	6825      	ldr	r5, [r4, #0]
 800462e:	1961      	adds	r1, r4, r5
 8004630:	428b      	cmp	r3, r1
 8004632:	bf04      	itt	eq
 8004634:	6819      	ldreq	r1, [r3, #0]
 8004636:	685b      	ldreq	r3, [r3, #4]
 8004638:	6063      	str	r3, [r4, #4]
 800463a:	bf04      	itt	eq
 800463c:	1949      	addeq	r1, r1, r5
 800463e:	6021      	streq	r1, [r4, #0]
 8004640:	6054      	str	r4, [r2, #4]
 8004642:	e7ca      	b.n	80045da <_free_r+0x26>
 8004644:	b003      	add	sp, #12
 8004646:	bd30      	pop	{r4, r5, pc}
 8004648:	20001648 	.word	0x20001648

0800464c <sbrk_aligned>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4e0e      	ldr	r6, [pc, #56]	; (8004688 <sbrk_aligned+0x3c>)
 8004650:	460c      	mov	r4, r1
 8004652:	6831      	ldr	r1, [r6, #0]
 8004654:	4605      	mov	r5, r0
 8004656:	b911      	cbnz	r1, 800465e <sbrk_aligned+0x12>
 8004658:	f000 f8bc 	bl	80047d4 <_sbrk_r>
 800465c:	6030      	str	r0, [r6, #0]
 800465e:	4621      	mov	r1, r4
 8004660:	4628      	mov	r0, r5
 8004662:	f000 f8b7 	bl	80047d4 <_sbrk_r>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	d00a      	beq.n	8004680 <sbrk_aligned+0x34>
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d007      	beq.n	8004684 <sbrk_aligned+0x38>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4628      	mov	r0, r5
 8004678:	f000 f8ac 	bl	80047d4 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d101      	bne.n	8004684 <sbrk_aligned+0x38>
 8004680:	f04f 34ff 	mov.w	r4, #4294967295
 8004684:	4620      	mov	r0, r4
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	2000164c 	.word	0x2000164c

0800468c <_malloc_r>:
 800468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	1ccd      	adds	r5, r1, #3
 8004692:	f025 0503 	bic.w	r5, r5, #3
 8004696:	3508      	adds	r5, #8
 8004698:	2d0c      	cmp	r5, #12
 800469a:	bf38      	it	cc
 800469c:	250c      	movcc	r5, #12
 800469e:	2d00      	cmp	r5, #0
 80046a0:	4607      	mov	r7, r0
 80046a2:	db01      	blt.n	80046a8 <_malloc_r+0x1c>
 80046a4:	42a9      	cmp	r1, r5
 80046a6:	d905      	bls.n	80046b4 <_malloc_r+0x28>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	2600      	movs	r6, #0
 80046ae:	4630      	mov	r0, r6
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	4e2e      	ldr	r6, [pc, #184]	; (8004770 <_malloc_r+0xe4>)
 80046b6:	f000 f89d 	bl	80047f4 <__malloc_lock>
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	461c      	mov	r4, r3
 80046be:	bb34      	cbnz	r4, 800470e <_malloc_r+0x82>
 80046c0:	4629      	mov	r1, r5
 80046c2:	4638      	mov	r0, r7
 80046c4:	f7ff ffc2 	bl	800464c <sbrk_aligned>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	4604      	mov	r4, r0
 80046cc:	d14d      	bne.n	800476a <_malloc_r+0xde>
 80046ce:	6834      	ldr	r4, [r6, #0]
 80046d0:	4626      	mov	r6, r4
 80046d2:	2e00      	cmp	r6, #0
 80046d4:	d140      	bne.n	8004758 <_malloc_r+0xcc>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	4631      	mov	r1, r6
 80046da:	4638      	mov	r0, r7
 80046dc:	eb04 0803 	add.w	r8, r4, r3
 80046e0:	f000 f878 	bl	80047d4 <_sbrk_r>
 80046e4:	4580      	cmp	r8, r0
 80046e6:	d13a      	bne.n	800475e <_malloc_r+0xd2>
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	3503      	adds	r5, #3
 80046ec:	1a6d      	subs	r5, r5, r1
 80046ee:	f025 0503 	bic.w	r5, r5, #3
 80046f2:	3508      	adds	r5, #8
 80046f4:	2d0c      	cmp	r5, #12
 80046f6:	bf38      	it	cc
 80046f8:	250c      	movcc	r5, #12
 80046fa:	4629      	mov	r1, r5
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7ff ffa5 	bl	800464c <sbrk_aligned>
 8004702:	3001      	adds	r0, #1
 8004704:	d02b      	beq.n	800475e <_malloc_r+0xd2>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	442b      	add	r3, r5
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	e00e      	b.n	800472c <_malloc_r+0xa0>
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	1b52      	subs	r2, r2, r5
 8004712:	d41e      	bmi.n	8004752 <_malloc_r+0xc6>
 8004714:	2a0b      	cmp	r2, #11
 8004716:	d916      	bls.n	8004746 <_malloc_r+0xba>
 8004718:	1961      	adds	r1, r4, r5
 800471a:	42a3      	cmp	r3, r4
 800471c:	6025      	str	r5, [r4, #0]
 800471e:	bf18      	it	ne
 8004720:	6059      	strne	r1, [r3, #4]
 8004722:	6863      	ldr	r3, [r4, #4]
 8004724:	bf08      	it	eq
 8004726:	6031      	streq	r1, [r6, #0]
 8004728:	5162      	str	r2, [r4, r5]
 800472a:	604b      	str	r3, [r1, #4]
 800472c:	4638      	mov	r0, r7
 800472e:	f104 060b 	add.w	r6, r4, #11
 8004732:	f000 f865 	bl	8004800 <__malloc_unlock>
 8004736:	f026 0607 	bic.w	r6, r6, #7
 800473a:	1d23      	adds	r3, r4, #4
 800473c:	1af2      	subs	r2, r6, r3
 800473e:	d0b6      	beq.n	80046ae <_malloc_r+0x22>
 8004740:	1b9b      	subs	r3, r3, r6
 8004742:	50a3      	str	r3, [r4, r2]
 8004744:	e7b3      	b.n	80046ae <_malloc_r+0x22>
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	42a3      	cmp	r3, r4
 800474a:	bf0c      	ite	eq
 800474c:	6032      	streq	r2, [r6, #0]
 800474e:	605a      	strne	r2, [r3, #4]
 8004750:	e7ec      	b.n	800472c <_malloc_r+0xa0>
 8004752:	4623      	mov	r3, r4
 8004754:	6864      	ldr	r4, [r4, #4]
 8004756:	e7b2      	b.n	80046be <_malloc_r+0x32>
 8004758:	4634      	mov	r4, r6
 800475a:	6876      	ldr	r6, [r6, #4]
 800475c:	e7b9      	b.n	80046d2 <_malloc_r+0x46>
 800475e:	230c      	movs	r3, #12
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4638      	mov	r0, r7
 8004764:	f000 f84c 	bl	8004800 <__malloc_unlock>
 8004768:	e7a1      	b.n	80046ae <_malloc_r+0x22>
 800476a:	6025      	str	r5, [r4, #0]
 800476c:	e7de      	b.n	800472c <_malloc_r+0xa0>
 800476e:	bf00      	nop
 8004770:	20001648 	.word	0x20001648

08004774 <_realloc_r>:
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	4680      	mov	r8, r0
 800477a:	4614      	mov	r4, r2
 800477c:	460e      	mov	r6, r1
 800477e:	b921      	cbnz	r1, 800478a <_realloc_r+0x16>
 8004780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004784:	4611      	mov	r1, r2
 8004786:	f7ff bf81 	b.w	800468c <_malloc_r>
 800478a:	b92a      	cbnz	r2, 8004798 <_realloc_r+0x24>
 800478c:	f7ff ff12 	bl	80045b4 <_free_r>
 8004790:	4625      	mov	r5, r4
 8004792:	4628      	mov	r0, r5
 8004794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004798:	f000 f838 	bl	800480c <_malloc_usable_size_r>
 800479c:	4284      	cmp	r4, r0
 800479e:	4607      	mov	r7, r0
 80047a0:	d802      	bhi.n	80047a8 <_realloc_r+0x34>
 80047a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047a6:	d812      	bhi.n	80047ce <_realloc_r+0x5a>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff ff6e 	bl	800468c <_malloc_r>
 80047b0:	4605      	mov	r5, r0
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0ed      	beq.n	8004792 <_realloc_r+0x1e>
 80047b6:	42bc      	cmp	r4, r7
 80047b8:	4622      	mov	r2, r4
 80047ba:	4631      	mov	r1, r6
 80047bc:	bf28      	it	cs
 80047be:	463a      	movcs	r2, r7
 80047c0:	f7ff fbb0 	bl	8003f24 <memcpy>
 80047c4:	4631      	mov	r1, r6
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7ff fef4 	bl	80045b4 <_free_r>
 80047cc:	e7e1      	b.n	8004792 <_realloc_r+0x1e>
 80047ce:	4635      	mov	r5, r6
 80047d0:	e7df      	b.n	8004792 <_realloc_r+0x1e>
	...

080047d4 <_sbrk_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d06      	ldr	r5, [pc, #24]	; (80047f0 <_sbrk_r+0x1c>)
 80047d8:	2300      	movs	r3, #0
 80047da:	4604      	mov	r4, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fc fa8c 	bl	8000cfc <_sbrk>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_sbrk_r+0x1a>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_sbrk_r+0x1a>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20001650 	.word	0x20001650

080047f4 <__malloc_lock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__malloc_lock+0x8>)
 80047f6:	f000 b811 	b.w	800481c <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	20001654 	.word	0x20001654

08004800 <__malloc_unlock>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__malloc_unlock+0x8>)
 8004802:	f000 b80c 	b.w	800481e <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	20001654 	.word	0x20001654

0800480c <_malloc_usable_size_r>:
 800480c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004810:	1f18      	subs	r0, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfbc      	itt	lt
 8004816:	580b      	ldrlt	r3, [r1, r0]
 8004818:	18c0      	addlt	r0, r0, r3
 800481a:	4770      	bx	lr

0800481c <__retarget_lock_acquire_recursive>:
 800481c:	4770      	bx	lr

0800481e <__retarget_lock_release_recursive>:
 800481e:	4770      	bx	lr

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
